trigger:
  - master

pr:
  branches:
    include:
    - master

variables:
  DotNetCoreVersion: '2.1.503'

jobs:
  - job: Windows_Build
    pool:
      vmImage: 'VS2017-Win2016'
    variables:
      LoggingArgs: '/flp:Summary;Verbosity=minimal;LogFile=msbuild.sum /flp1:warningsonly;logfile=msbuild.wrn /flp2:errorsonly;logfile=msbuild.err'

    steps:
      - task: e587fa4a-fc98-44fd-ab3e-ddaa3025219a@2
        displayName: 'CredScan'
        inputs:
          toolVersion: 'Latest'
          suppressionsFile: './tools/credscan/CredScanSuppressions.json'

      - task: 18ff34ab-7385-4b57-b5d5-a0fcc7b5b274@1
        displayName: 'PostAnalysis'
        inputs:
          AllTools: false
          BinSkim: false
          CredScan: true
          RoslynAnalyzers: false
          TSLint: false
          ToolLogsNotFoundAction: 'Standard'
          
      - task: CmdLine@1
        inputs:
          filename: C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.2 Tools\sn.exe
          arguments: -Vr *,31bf3856ad364e35
      - task: MSBuild@1
        displayName: 'Getting latest build tools'
        inputs:
          solution: build.proj
      - task: MSBuild@1
        displayName: 'Running tests'
        inputs:
          solution: build.proj
          msbuildArguments: /t:RunTests /clp:ShowTimestamp $(LoggingArgs) 
      - task: MSBuild@1
        displayName: 'creating packages'
        inputs:
          solution: build.proj
          msbuildArguments: /t:PackageNoBuild /clp:ShowTimestamp $(LoggingArgs) /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)"
      - task: PublishBuildArtifacts@1
        condition: succeededOrFailed()
        displayName: 'Publish Artifacts'
        inputs:
          ArtifactName: packages
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/*.trx'
          testRunTitle: 'Windows Test Results'
          testResultsFormat: 'VSTest'
          mergeTestResults: true
          
  - job: Ubuntu_Build
    pool:
      vmImage: 'ubuntu-16.04'
  
    steps:
        - task: DotNetCoreInstaller@0
          displayName: 'Use .NET Core sdk $(DotNetCoreVersion)'
          inputs:
            version: '$(DotNetCoreVersion)'
        - script: './test_on_linux.sh'
          displayName: 'Build and test on Non-windows machine'
        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testResultsFiles: '**/*.trx'
            testRunTitle: 'Ubuntu Test Results'
            testResultsFormat: 'VSTest'
            mergeTestResults: true