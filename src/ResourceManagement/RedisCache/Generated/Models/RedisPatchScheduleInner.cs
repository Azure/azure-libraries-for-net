// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Redis.Fluent.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Response to put/get patch schedules for Redis cache.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RedisPatchScheduleInner : ProxyResourceInner
    {
        /// <summary>
        /// Initializes a new instance of the RedisPatchScheduleInner class.
        /// </summary>
        public RedisPatchScheduleInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RedisPatchScheduleInner class.
        /// </summary>
        /// <param name="scheduleEntries">List of patch schedules for a Redis
        /// cache.</param>
        public RedisPatchScheduleInner(IList<ScheduleEntryInner> scheduleEntries, string id = default(string), string name = default(string), string type = default(string))
            : base(id, name, type)
        {
            ScheduleEntries = scheduleEntries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of patch schedules for a Redis cache.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scheduleEntries")]
        public IList<ScheduleEntryInner> ScheduleEntries { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScheduleEntries == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScheduleEntries");
            }
            if (ScheduleEntries != null)
            {
                foreach (var element in ScheduleEntries)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
