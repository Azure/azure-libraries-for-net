// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.

using System;
using System.Linq;
using Microsoft.Azure.Management.ContainerInstance.Fluent;
using Microsoft.Azure.Management.ResourceManager.Fluent.Authentication;
using Microsoft.Azure.Management.ResourceManager.Fluent.Core;
using Microsoft.Azure.Management.Graph.RBAC.Fluent;
using Microsoft.Azure.Management.Storage.Fluent;

namespace Microsoft.Azure.Management.ContainerInstance.Fluent
{
    public class ContainerInstanceManager : Manager<IContainerInstanceManagementClient>, IContainerInstanceManager, IBeta
    {
        #region Fluent private collections
        private IContainerGroups containerGroups;
        private IStorageManager storageManager;
        private IGraphRbacManager rbacManager;
        #endregion

        #region ctrs
        private ContainerInstanceManager(RestClient restClient, string subscriptionId) :
            base(restClient, subscriptionId, ContainerInstanceManagementClient.NewInstance(restClient))
        {
            Inner.SubscriptionId = subscriptionId;
            this.storageManager = StorageManager.Authenticate(restClient, subscriptionId);
            this.rbacManager = GraphRbacManager.Authenticate(restClient, subscriptionId);
        }
        #endregion
        #region ContainerInstanceManager builder
        /// <summary>
        /// Creates an instance of ContainerInstanceManager that exposes container instance resource management API entry points.
        /// </summary>
        /// <param name="credentials">the credentials to use</param>
        /// <param name="subscriptionId">the subscription UUID</param>
        /// <returns>the ContainerInstanceManager</returns>
        public static IContainerInstanceManager Authenticate(AzureCredentials credentials, string subscriptionId)
        {
            return Authenticate(RestClient.Configure()
                    .WithEnvironment(credentials.Environment)
                    .WithCredentials(credentials)
                    .WithDelegatingHandler(new ProviderRegistrationDelegatingHandler(credentials))
                    .Build(), subscriptionId);
        }
        /// <summary>
        /// Creates an instance of ContainerInstanceManager that exposes container instance resource management API entry points.
        /// </summary>
        /// <param name="restClient">the RestClient to be used for API calls.</param>
        /// <param name="subscriptionId">the subscription UUID</param>
        /// <returns>the ContainerInstanceManager</returns>
        public static IContainerInstanceManager Authenticate(RestClient restClient, string subscriptionId)
        {
            return new ContainerInstanceManager(restClient, subscriptionId);
        }
        /// <summary>
        /// Get a Configurable instance that can be used to create ContainerInstanceManager with optional configuration.
        /// </summary>
        /// <returns>the instance allowing configurations</returns>
        public static IConfigurable Configure()
        {
            return new Configurable();
        }
        #endregion
        #region IConfigurable and it's implementation
        /// <summary>
        /// The inteface allowing configurations to be set.
        /// </summary>
        public interface IConfigurable : IAzureConfigurable<IConfigurable>
        {
            IContainerInstanceManager Authenticate(AzureCredentials credentials, string subscriptionId);
        }
        protected class Configurable :
            AzureConfigurable<IConfigurable>,
            IConfigurable
        {
            /// <summary>
            /// Creates an instance of ContainerInstanceManager that exposes Container Instance management API entry points.
            /// </summary>
            /// <param name="credentials">credentials the credentials to use</param>
            /// <param name="subscriptionId">The subscription UUID</param>
            /// <returns>the interface exposing Container Instance management API entry points that work in a subscription</returns>
            public IContainerInstanceManager Authenticate(AzureCredentials credentials, string subscriptionId)
            {
                return new ContainerInstanceManager(BuildRestClient(credentials), subscriptionId);
            }
        }
        #endregion

        public IContainerGroups ContainerGroups
        {
            get
            {
                if (containerGroups == null)
                {
                    containerGroups = new ContainerGroupsImpl(this, this.storageManager, this.rbacManager);
                }

                return containerGroups;
            }
        }
    }
    /// <summary>
    /// Entry point to Azure Container Instance resource management.
    /// </summary>
    public interface IContainerInstanceManager : IManager<IContainerInstanceManagementClient>
    {
        IContainerGroups ContainerGroups { get; }
    }
}
