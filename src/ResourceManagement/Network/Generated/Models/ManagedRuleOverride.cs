// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a managed rule group override setting.
    /// </summary>
    public partial class ManagedRuleOverride
    {
        /// <summary>
        /// Initializes a new instance of the ManagedRuleOverride class.
        /// </summary>
        public ManagedRuleOverride()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedRuleOverride class.
        /// </summary>
        /// <param name="ruleId">Identifier for the managed rule.</param>
        /// <param name="state">Describes the state of the managed rule.
        /// Defaults to Disabled if not specified. Possible values include:
        /// 'Disabled'</param>
        public ManagedRuleOverride(string ruleId, ManagedRuleEnabledState state = default(ManagedRuleEnabledState))
        {
            RuleId = ruleId;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identifier for the managed rule.
        /// </summary>
        [JsonProperty(PropertyName = "ruleId")]
        public string RuleId { get; set; }

        /// <summary>
        /// Gets or sets describes the state of the managed rule. Defaults to
        /// Disabled if not specified. Possible values include: 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public ManagedRuleEnabledState State { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RuleId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RuleId");
            }
        }
    }
}
