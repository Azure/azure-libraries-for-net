// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VpnServerConfiguration Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VpnServerConfigurationInner : Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the VpnServerConfigurationInner
        /// class.
        /// </summary>
        public VpnServerConfigurationInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VpnServerConfigurationInner
        /// class.
        /// </summary>
        /// <param name="vpnServerConfigurationName">The name of the
        /// VpnServerConfiguration that is unique within a resource
        /// group.</param>
        /// <param name="vpnProtocols">VPN protocols for the
        /// VpnServerConfiguration.</param>
        /// <param name="vpnAuthenticationTypes">VPN authentication types for
        /// the VpnServerConfiguration.</param>
        /// <param name="vpnClientRootCertificates">VPN client root certificate
        /// of VpnServerConfiguration.</param>
        /// <param name="vpnClientRevokedCertificates">VPN client revoked
        /// certificate of VpnServerConfiguration.</param>
        /// <param name="radiusServerRootCertificates">Radius Server root
        /// certificate of VpnServerConfiguration.</param>
        /// <param name="radiusClientRootCertificates">Radius client root
        /// certificate of VpnServerConfiguration.</param>
        /// <param name="vpnClientIpsecPolicies">VpnClientIpsecPolicies for
        /// VpnServerConfiguration.</param>
        /// <param name="radiusServerAddress">The radius server address
        /// property of the VpnServerConfiguration resource for point to site
        /// client connection.</param>
        /// <param name="radiusServerSecret">The radius secret property of the
        /// VpnServerConfiguration resource for point to site client
        /// connection.</param>
        /// <param name="aadAuthenticationParameters">The set of aad vpn
        /// authentication parameters.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// VpnServerConfiguration resource. Possible values are: 'Updating',
        /// 'Deleting', and 'Failed'.</param>
        /// <param name="p2SVpnGateways">List of references to
        /// P2SVpnGateways.</param>
        /// <param name="vpnServerConfigurationPropertiesEtag">A unique
        /// read-only string that changes whenever the resource is
        /// updated.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public VpnServerConfigurationInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string vpnServerConfigurationName = default(string), IList<VpnGatewayTunnelingProtocol> vpnProtocols = default(IList<VpnGatewayTunnelingProtocol>), IList<VpnAuthenticationType> vpnAuthenticationTypes = default(IList<VpnAuthenticationType>), IList<VpnServerConfigVpnClientRootCertificate> vpnClientRootCertificates = default(IList<VpnServerConfigVpnClientRootCertificate>), IList<VpnServerConfigVpnClientRevokedCertificate> vpnClientRevokedCertificates = default(IList<VpnServerConfigVpnClientRevokedCertificate>), IList<VpnServerConfigRadiusServerRootCertificate> radiusServerRootCertificates = default(IList<VpnServerConfigRadiusServerRootCertificate>), IList<VpnServerConfigRadiusClientRootCertificate> radiusClientRootCertificates = default(IList<VpnServerConfigRadiusClientRootCertificate>), IList<IpsecPolicy> vpnClientIpsecPolicies = default(IList<IpsecPolicy>), string radiusServerAddress = default(string), string radiusServerSecret = default(string), AadAuthenticationParameters aadAuthenticationParameters = default(AadAuthenticationParameters), string provisioningState = default(string), IList<P2SVpnGatewayInner> p2SVpnGateways = default(IList<P2SVpnGatewayInner>), string vpnServerConfigurationPropertiesEtag = default(string), string etag = default(string))
            : base(location, id, name, type, tags)
        {
            VpnServerConfigurationName = vpnServerConfigurationName;
            VpnProtocols = vpnProtocols;
            VpnAuthenticationTypes = vpnAuthenticationTypes;
            VpnClientRootCertificates = vpnClientRootCertificates;
            VpnClientRevokedCertificates = vpnClientRevokedCertificates;
            RadiusServerRootCertificates = radiusServerRootCertificates;
            RadiusClientRootCertificates = radiusClientRootCertificates;
            VpnClientIpsecPolicies = vpnClientIpsecPolicies;
            RadiusServerAddress = radiusServerAddress;
            RadiusServerSecret = radiusServerSecret;
            AadAuthenticationParameters = aadAuthenticationParameters;
            ProvisioningState = provisioningState;
            P2SVpnGateways = p2SVpnGateways;
            VpnServerConfigurationPropertiesEtag = vpnServerConfigurationPropertiesEtag;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the VpnServerConfiguration that is unique
        /// within a resource group.
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string VpnServerConfigurationName { get; set; }

        /// <summary>
        /// Gets or sets VPN protocols for the VpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnProtocols")]
        public IList<VpnGatewayTunnelingProtocol> VpnProtocols { get; set; }

        /// <summary>
        /// Gets or sets VPN authentication types for the
        /// VpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnAuthenticationTypes")]
        public IList<VpnAuthenticationType> VpnAuthenticationTypes { get; set; }

        /// <summary>
        /// Gets or sets VPN client root certificate of VpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnClientRootCertificates")]
        public IList<VpnServerConfigVpnClientRootCertificate> VpnClientRootCertificates { get; set; }

        /// <summary>
        /// Gets or sets VPN client revoked certificate of
        /// VpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnClientRevokedCertificates")]
        public IList<VpnServerConfigVpnClientRevokedCertificate> VpnClientRevokedCertificates { get; set; }

        /// <summary>
        /// Gets or sets radius Server root certificate of
        /// VpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.radiusServerRootCertificates")]
        public IList<VpnServerConfigRadiusServerRootCertificate> RadiusServerRootCertificates { get; set; }

        /// <summary>
        /// Gets or sets radius client root certificate of
        /// VpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.radiusClientRootCertificates")]
        public IList<VpnServerConfigRadiusClientRootCertificate> RadiusClientRootCertificates { get; set; }

        /// <summary>
        /// Gets or sets vpnClientIpsecPolicies for VpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnClientIpsecPolicies")]
        public IList<IpsecPolicy> VpnClientIpsecPolicies { get; set; }

        /// <summary>
        /// Gets or sets the radius server address property of the
        /// VpnServerConfiguration resource for point to site client
        /// connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.radiusServerAddress")]
        public string RadiusServerAddress { get; set; }

        /// <summary>
        /// Gets or sets the radius secret property of the
        /// VpnServerConfiguration resource for point to site client
        /// connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.radiusServerSecret")]
        public string RadiusServerSecret { get; set; }

        /// <summary>
        /// Gets or sets the set of aad vpn authentication parameters.
        /// </summary>
        [JsonProperty(PropertyName = "properties.aadAuthenticationParameters")]
        public AadAuthenticationParameters AadAuthenticationParameters { get; set; }

        /// <summary>
        /// Gets the provisioning state of the VpnServerConfiguration resource.
        /// Possible values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets list of references to P2SVpnGateways.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnGateways")]
        public IList<P2SVpnGatewayInner> P2SVpnGateways { get; private set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.etag")]
        public string VpnServerConfigurationPropertiesEtag { get; private set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VpnClientIpsecPolicies != null)
            {
                foreach (var element in VpnClientIpsecPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (P2SVpnGateways != null)
            {
                foreach (var element1 in P2SVpnGateways)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
