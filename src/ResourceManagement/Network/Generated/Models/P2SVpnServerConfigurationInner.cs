// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// P2SVpnServerConfiguration Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class P2SVpnServerConfigurationInner : Management.ResourceManager.Fluent.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the P2SVpnServerConfigurationInner
        /// class.
        /// </summary>
        public P2SVpnServerConfigurationInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the P2SVpnServerConfigurationInner
        /// class.
        /// </summary>
        /// <param name="p2SVpnServerConfigurationPropertiesName">The name of
        /// the P2SVpnServerConfiguration that is unique within a VirtualWan in
        /// a resource group. This name can be used to access the resource
        /// along with Paren VirtualWan resource name.</param>
        /// <param name="vpnProtocols">VPN protocols for the
        /// P2SVpnServerConfiguration.</param>
        /// <param name="p2SVpnServerConfigVpnClientRootCertificates">VPN
        /// client root certificate of P2SVpnServerConfiguration.</param>
        /// <param name="p2SVpnServerConfigVpnClientRevokedCertificates">VPN
        /// client revoked certificate of P2SVpnServerConfiguration.</param>
        /// <param name="p2SVpnServerConfigRadiusServerRootCertificates">Radius
        /// Server root certificate of P2SVpnServerConfiguration.</param>
        /// <param name="p2SVpnServerConfigRadiusClientRootCertificates">Radius
        /// client root certificate of P2SVpnServerConfiguration.</param>
        /// <param name="vpnClientIpsecPolicies">VpnClientIpsecPolicies for
        /// P2SVpnServerConfiguration.</param>
        /// <param name="radiusServerAddress">The radius server address
        /// property of the P2SVpnServerConfiguration resource for point to
        /// site client connection.</param>
        /// <param name="radiusServerSecret">The radius secret property of the
        /// P2SVpnServerConfiguration resource for point to site client
        /// connection.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// P2SVpnServerConfiguration resource. Possible values are:
        /// 'Updating', 'Deleting', and 'Failed'.</param>
        /// <param name="p2SVpnGateways">List of references to
        /// P2SVpnGateways.</param>
        /// <param name="p2SVpnServerConfigurationPropertiesEtag">A unique
        /// read-only string that changes whenever the resource is
        /// updated.</param>
        /// <param name="name">The name of the resource that is unique within a
        /// resource group. This name can be used to access the
        /// resource.</param>
        /// <param name="etag">Gets a unique read-only string that changes
        /// whenever the resource is updated.</param>
        public P2SVpnServerConfigurationInner(string id = default(string), string p2SVpnServerConfigurationPropertiesName = default(string), IList<VpnGatewayTunnelingProtocol> vpnProtocols = default(IList<VpnGatewayTunnelingProtocol>), IList<P2SVpnServerConfigVpnClientRootCertificateInner> p2SVpnServerConfigVpnClientRootCertificates = default(IList<P2SVpnServerConfigVpnClientRootCertificateInner>), IList<P2SVpnServerConfigVpnClientRevokedCertificateInner> p2SVpnServerConfigVpnClientRevokedCertificates = default(IList<P2SVpnServerConfigVpnClientRevokedCertificateInner>), IList<P2SVpnServerConfigRadiusServerRootCertificateInner> p2SVpnServerConfigRadiusServerRootCertificates = default(IList<P2SVpnServerConfigRadiusServerRootCertificateInner>), IList<P2SVpnServerConfigRadiusClientRootCertificateInner> p2SVpnServerConfigRadiusClientRootCertificates = default(IList<P2SVpnServerConfigRadiusClientRootCertificateInner>), IList<IpsecPolicy> vpnClientIpsecPolicies = default(IList<IpsecPolicy>), string radiusServerAddress = default(string), string radiusServerSecret = default(string), string provisioningState = default(string), IList<Management.ResourceManager.Fluent.SubResource> p2SVpnGateways = default(IList<Management.ResourceManager.Fluent.SubResource>), string p2SVpnServerConfigurationPropertiesEtag = default(string), string name = default(string), string etag = default(string))
            : base(id)
        {
            P2SVpnServerConfigurationPropertiesName = p2SVpnServerConfigurationPropertiesName;
            VpnProtocols = vpnProtocols;
            P2SVpnServerConfigVpnClientRootCertificates = p2SVpnServerConfigVpnClientRootCertificates;
            P2SVpnServerConfigVpnClientRevokedCertificates = p2SVpnServerConfigVpnClientRevokedCertificates;
            P2SVpnServerConfigRadiusServerRootCertificates = p2SVpnServerConfigRadiusServerRootCertificates;
            P2SVpnServerConfigRadiusClientRootCertificates = p2SVpnServerConfigRadiusClientRootCertificates;
            VpnClientIpsecPolicies = vpnClientIpsecPolicies;
            RadiusServerAddress = radiusServerAddress;
            RadiusServerSecret = radiusServerSecret;
            ProvisioningState = provisioningState;
            P2SVpnGateways = p2SVpnGateways;
            P2SVpnServerConfigurationPropertiesEtag = p2SVpnServerConfigurationPropertiesEtag;
            Name = name;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the P2SVpnServerConfiguration that is
        /// unique within a VirtualWan in a resource group. This name can be
        /// used to access the resource along with Paren VirtualWan resource
        /// name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string P2SVpnServerConfigurationPropertiesName { get; set; }

        /// <summary>
        /// Gets or sets VPN protocols for the P2SVpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnProtocols")]
        public IList<VpnGatewayTunnelingProtocol> VpnProtocols { get; set; }

        /// <summary>
        /// Gets or sets VPN client root certificate of
        /// P2SVpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnServerConfigVpnClientRootCertificates")]
        public IList<P2SVpnServerConfigVpnClientRootCertificateInner> P2SVpnServerConfigVpnClientRootCertificates { get; set; }

        /// <summary>
        /// Gets or sets VPN client revoked certificate of
        /// P2SVpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnServerConfigVpnClientRevokedCertificates")]
        public IList<P2SVpnServerConfigVpnClientRevokedCertificateInner> P2SVpnServerConfigVpnClientRevokedCertificates { get; set; }

        /// <summary>
        /// Gets or sets radius Server root certificate of
        /// P2SVpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnServerConfigRadiusServerRootCertificates")]
        public IList<P2SVpnServerConfigRadiusServerRootCertificateInner> P2SVpnServerConfigRadiusServerRootCertificates { get; set; }

        /// <summary>
        /// Gets or sets radius client root certificate of
        /// P2SVpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnServerConfigRadiusClientRootCertificates")]
        public IList<P2SVpnServerConfigRadiusClientRootCertificateInner> P2SVpnServerConfigRadiusClientRootCertificates { get; set; }

        /// <summary>
        /// Gets or sets vpnClientIpsecPolicies for P2SVpnServerConfiguration.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnClientIpsecPolicies")]
        public IList<IpsecPolicy> VpnClientIpsecPolicies { get; set; }

        /// <summary>
        /// Gets or sets the radius server address property of the
        /// P2SVpnServerConfiguration resource for point to site client
        /// connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.radiusServerAddress")]
        public string RadiusServerAddress { get; set; }

        /// <summary>
        /// Gets or sets the radius secret property of the
        /// P2SVpnServerConfiguration resource for point to site client
        /// connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.radiusServerSecret")]
        public string RadiusServerSecret { get; set; }

        /// <summary>
        /// Gets the provisioning state of the P2SVpnServerConfiguration
        /// resource. Possible values are: 'Updating', 'Deleting', and
        /// 'Failed'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets list of references to P2SVpnGateways.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnGateways")]
        public IList<Management.ResourceManager.Fluent.SubResource> P2SVpnGateways { get; private set; }

        /// <summary>
        /// Gets or sets a unique read-only string that changes whenever the
        /// resource is updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.etag")]
        public string P2SVpnServerConfigurationPropertiesEtag { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource that is unique within a
        /// resource group. This name can be used to access the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

    }
}
