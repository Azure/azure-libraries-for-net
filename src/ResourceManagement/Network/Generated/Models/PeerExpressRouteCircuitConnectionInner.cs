// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering
    /// resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PeerExpressRouteCircuitConnectionInner : Management.ResourceManager.Fluent.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PeerExpressRouteCircuitConnectionInner class.
        /// </summary>
        public PeerExpressRouteCircuitConnectionInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PeerExpressRouteCircuitConnectionInner class.
        /// </summary>
        /// <param name="expressRouteCircuitPeering">Reference to Express Route
        /// Circuit Private Peering Resource of the circuit.</param>
        /// <param name="peerExpressRouteCircuitPeering">Reference to Express
        /// Route Circuit Private Peering Resource of the peered
        /// circuit.</param>
        /// <param name="addressPrefix">/29 IP address space to carve out
        /// Customer addresses for tunnels.</param>
        /// <param name="circuitConnectionStatus">Express Route Circuit
        /// connection state. Possible values include: 'Connected',
        /// 'Connecting', 'Disconnected'</param>
        /// <param name="connectionName">The name of the express route circuit
        /// connection resource.</param>
        /// <param name="authResourceGuid">The resource guid of the
        /// authorization used for the express route circuit
        /// connection.</param>
        /// <param name="provisioningState">The provisioning state of the peer
        /// express route circuit connection resource. Possible values include:
        /// 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="name">The name of the resource that is unique within a
        /// resource group. This name can be used to access the
        /// resource.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        /// <param name="type">Type of the resource.</param>
        public PeerExpressRouteCircuitConnectionInner(string id = default(string), Management.ResourceManager.Fluent.SubResource expressRouteCircuitPeering = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource peerExpressRouteCircuitPeering = default(Management.ResourceManager.Fluent.SubResource), string addressPrefix = default(string), CircuitConnectionStatus circuitConnectionStatus = default(CircuitConnectionStatus), string connectionName = default(string), string authResourceGuid = default(string), ProvisioningState provisioningState = default(ProvisioningState), string name = default(string), string etag = default(string), string type = default(string))
            : base(id)
        {
            ExpressRouteCircuitPeering = expressRouteCircuitPeering;
            PeerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
            AddressPrefix = addressPrefix;
            CircuitConnectionStatus = circuitConnectionStatus;
            ConnectionName = connectionName;
            AuthResourceGuid = authResourceGuid;
            ProvisioningState = provisioningState;
            Name = name;
            Etag = etag;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets reference to Express Route Circuit Private Peering
        /// Resource of the circuit.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expressRouteCircuitPeering")]
        public Management.ResourceManager.Fluent.SubResource ExpressRouteCircuitPeering { get; set; }

        /// <summary>
        /// Gets or sets reference to Express Route Circuit Private Peering
        /// Resource of the peered circuit.
        /// </summary>
        [JsonProperty(PropertyName = "properties.peerExpressRouteCircuitPeering")]
        public Management.ResourceManager.Fluent.SubResource PeerExpressRouteCircuitPeering { get; set; }

        /// <summary>
        /// Gets or sets /29 IP address space to carve out Customer addresses
        /// for tunnels.
        /// </summary>
        [JsonProperty(PropertyName = "properties.addressPrefix")]
        public string AddressPrefix { get; set; }

        /// <summary>
        /// Gets or sets express Route Circuit connection state. Possible
        /// values include: 'Connected', 'Connecting', 'Disconnected'
        /// </summary>
        [JsonProperty(PropertyName = "properties.circuitConnectionStatus")]
        public CircuitConnectionStatus CircuitConnectionStatus { get; set; }

        /// <summary>
        /// Gets or sets the name of the express route circuit connection
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.connectionName")]
        public string ConnectionName { get; set; }

        /// <summary>
        /// Gets or sets the resource guid of the authorization used for the
        /// express route circuit connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authResourceGuid")]
        public string AuthResourceGuid { get; set; }

        /// <summary>
        /// Gets the provisioning state of the peer express route circuit
        /// connection resource. Possible values include: 'Succeeded',
        /// 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the name of the resource that is unique within a
        /// resource group. This name can be used to access the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

    }
}
