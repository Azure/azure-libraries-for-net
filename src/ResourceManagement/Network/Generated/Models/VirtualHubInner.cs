// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// VirtualHub Resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualHubInner : Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualHubInner class.
        /// </summary>
        public VirtualHubInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualHubInner class.
        /// </summary>
        /// <param name="virtualWan">The VirtualWAN to which the VirtualHub
        /// belongs.</param>
        /// <param name="vpnGateway">The VpnGateway associated with this
        /// VirtualHub.</param>
        /// <param name="p2SVpnGateway">The P2SVpnGateway associated with this
        /// VirtualHub.</param>
        /// <param name="expressRouteGateway">The expressRouteGateway
        /// associated with this VirtualHub.</param>
        /// <param name="azureFirewall">The azureFirewall associated with this
        /// VirtualHub.</param>
        /// <param name="virtualNetworkConnections">List of all vnet
        /// connections with this VirtualHub.</param>
        /// <param name="addressPrefix">Address-prefix for this
        /// VirtualHub.</param>
        /// <param name="routeTable">The routeTable associated with this
        /// virtual hub.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// virtual hub resource. Possible values include: 'Succeeded',
        /// 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="securityProviderName">The Security Provider
        /// name.</param>
        /// <param name="virtualHubRouteTableV2s">List of all virtual hub route
        /// table v2s associated with this VirtualHub.</param>
        /// <param name="sku">The sku of this VirtualHub.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public VirtualHubInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), Management.ResourceManager.Fluent.SubResource virtualWan = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource vpnGateway = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource p2SVpnGateway = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource expressRouteGateway = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource azureFirewall = default(Management.ResourceManager.Fluent.SubResource), IList<HubVirtualNetworkConnectionInner> virtualNetworkConnections = default(IList<HubVirtualNetworkConnectionInner>), string addressPrefix = default(string), VirtualHubRouteTable routeTable = default(VirtualHubRouteTable), ProvisioningState provisioningState = default(ProvisioningState), string securityProviderName = default(string), IList<VirtualHubRouteTableV2Inner> virtualHubRouteTableV2s = default(IList<VirtualHubRouteTableV2Inner>), string sku = default(string), string etag = default(string))
            : base(location, id, name, type, tags)
        {
            VirtualWan = virtualWan;
            VpnGateway = vpnGateway;
            P2SVpnGateway = p2SVpnGateway;
            ExpressRouteGateway = expressRouteGateway;
            AzureFirewall = azureFirewall;
            VirtualNetworkConnections = virtualNetworkConnections;
            AddressPrefix = addressPrefix;
            RouteTable = routeTable;
            ProvisioningState = provisioningState;
            SecurityProviderName = securityProviderName;
            VirtualHubRouteTableV2s = virtualHubRouteTableV2s;
            Sku = sku;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the VirtualWAN to which the VirtualHub belongs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualWan")]
        public Management.ResourceManager.Fluent.SubResource VirtualWan { get; set; }

        /// <summary>
        /// Gets or sets the VpnGateway associated with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.vpnGateway")]
        public Management.ResourceManager.Fluent.SubResource VpnGateway { get; set; }

        /// <summary>
        /// Gets or sets the P2SVpnGateway associated with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.p2SVpnGateway")]
        public Management.ResourceManager.Fluent.SubResource P2SVpnGateway { get; set; }

        /// <summary>
        /// Gets or sets the expressRouteGateway associated with this
        /// VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expressRouteGateway")]
        public Management.ResourceManager.Fluent.SubResource ExpressRouteGateway { get; set; }

        /// <summary>
        /// Gets or sets the azureFirewall associated with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.azureFirewall")]
        public Management.ResourceManager.Fluent.SubResource AzureFirewall { get; set; }

        /// <summary>
        /// Gets or sets list of all vnet connections with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualNetworkConnections")]
        public IList<HubVirtualNetworkConnectionInner> VirtualNetworkConnections { get; set; }

        /// <summary>
        /// Gets or sets address-prefix for this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.addressPrefix")]
        public string AddressPrefix { get; set; }

        /// <summary>
        /// Gets or sets the routeTable associated with this virtual hub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.routeTable")]
        public VirtualHubRouteTable RouteTable { get; set; }

        /// <summary>
        /// Gets the provisioning state of the virtual hub resource. Possible
        /// values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the Security Provider name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.securityProviderName")]
        public string SecurityProviderName { get; set; }

        /// <summary>
        /// Gets or sets list of all virtual hub route table v2s associated
        /// with this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.virtualHubRouteTableV2s")]
        public IList<VirtualHubRouteTableV2Inner> VirtualHubRouteTableV2s { get; set; }

        /// <summary>
        /// Gets or sets the sku of this VirtualHub.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
