// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// ExpressRouteConnection resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ExpressRouteConnectionInner : Management.ResourceManager.Fluent.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteConnectionInner
        /// class.
        /// </summary>
        public ExpressRouteConnectionInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteConnectionInner
        /// class.
        /// </summary>
        /// <param name="expressRouteCircuitPeering">The ExpressRoute circuit
        /// peering.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// express route connection resource. Possible values include:
        /// 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="authorizationKey">Authorization key to establish the
        /// connection.</param>
        /// <param name="routingWeight">The routing weight associated to the
        /// connection.</param>
        /// <param name="enableInternetSecurity">Enable internet
        /// security.</param>
        public ExpressRouteConnectionInner(ExpressRouteCircuitPeeringId expressRouteCircuitPeering, string name, string id = default(string), ProvisioningState provisioningState = default(ProvisioningState), string authorizationKey = default(string), int? routingWeight = default(int?), bool? enableInternetSecurity = default(bool?))
            : base(id)
        {
            ProvisioningState = provisioningState;
            ExpressRouteCircuitPeering = expressRouteCircuitPeering;
            AuthorizationKey = authorizationKey;
            RoutingWeight = routingWeight;
            EnableInternetSecurity = enableInternetSecurity;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the provisioning state of the express route connection
        /// resource. Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the ExpressRoute circuit peering.
        /// </summary>
        [JsonProperty(PropertyName = "properties.expressRouteCircuitPeering")]
        public ExpressRouteCircuitPeeringId ExpressRouteCircuitPeering { get; set; }

        /// <summary>
        /// Gets or sets authorization key to establish the connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.authorizationKey")]
        public string AuthorizationKey { get; set; }

        /// <summary>
        /// Gets or sets the routing weight associated to the connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.routingWeight")]
        public int? RoutingWeight { get; set; }

        /// <summary>
        /// Gets or sets enable internet security.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableInternetSecurity")]
        public bool? EnableInternetSecurity { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExpressRouteCircuitPeering == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExpressRouteCircuitPeering");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
