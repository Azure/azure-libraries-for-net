// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Virtual Network Tap resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class VirtualNetworkTapInner : Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkTapInner class.
        /// </summary>
        public VirtualNetworkTapInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualNetworkTapInner class.
        /// </summary>
        /// <param name="networkInterfaceTapConfigurations">Specifies the list
        /// of resource IDs for the network interface IP configuration that
        /// needs to be tapped.</param>
        /// <param name="resourceGuid">The resource GUID property of the
        /// virtual network tap resource.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// virtual network tap resource. Possible values include: 'Succeeded',
        /// 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="destinationNetworkInterfaceIPConfiguration">The
        /// reference to the private IP Address of the collector nic that will
        /// receive the tap.</param>
        /// <param name="destinationLoadBalancerFrontEndIPConfiguration">The
        /// reference to the private IP address on the internal Load Balancer
        /// that will receive the tap.</param>
        /// <param name="destinationPort">The VXLAN destination port that will
        /// receive the tapped traffic.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public VirtualNetworkTapInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IList<NetworkInterfaceTapConfigurationInner> networkInterfaceTapConfigurations = default(IList<NetworkInterfaceTapConfigurationInner>), string resourceGuid = default(string), ProvisioningState provisioningState = default(ProvisioningState), Management.ResourceManager.Fluent.SubResource destinationNetworkInterfaceIPConfiguration = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource destinationLoadBalancerFrontEndIPConfiguration = default(Management.ResourceManager.Fluent.SubResource), int? destinationPort = default(int?), string etag = default(string))
            : base(location, id, name, type, tags)
        {
            NetworkInterfaceTapConfigurations = networkInterfaceTapConfigurations;
            ResourceGuid = resourceGuid;
            ProvisioningState = provisioningState;
            DestinationNetworkInterfaceIPConfiguration = destinationNetworkInterfaceIPConfiguration;
            DestinationLoadBalancerFrontEndIPConfiguration = destinationLoadBalancerFrontEndIPConfiguration;
            DestinationPort = destinationPort;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets specifies the list of resource IDs for the network interface
        /// IP configuration that needs to be tapped.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkInterfaceTapConfigurations")]
        public IList<NetworkInterfaceTapConfigurationInner> NetworkInterfaceTapConfigurations { get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the virtual network tap
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the virtual network tap resource.
        /// Possible values include: 'Succeeded', 'Updating', 'Deleting',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the reference to the private IP Address of the
        /// collector nic that will receive the tap.
        /// </summary>
        [JsonProperty(PropertyName = "properties.destinationNetworkInterfaceIPConfiguration")]
        public Management.ResourceManager.Fluent.SubResource DestinationNetworkInterfaceIPConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the reference to the private IP address on the
        /// internal Load Balancer that will receive the tap.
        /// </summary>
        [JsonProperty(PropertyName = "properties.destinationLoadBalancerFrontEndIPConfiguration")]
        public Management.ResourceManager.Fluent.SubResource DestinationLoadBalancerFrontEndIPConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the VXLAN destination port that will receive the
        /// tapped traffic.
        /// </summary>
        [JsonProperty(PropertyName = "properties.destinationPort")]
        public int? DestinationPort { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
