// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Nat Gateway resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class NatGatewayInner : Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the NatGatewayInner class.
        /// </summary>
        public NatGatewayInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NatGatewayInner class.
        /// </summary>
        /// <param name="sku">The nat gateway SKU.</param>
        /// <param name="idleTimeoutInMinutes">The idle timeout of the nat
        /// gateway.</param>
        /// <param name="publicIpAddresses">An array of public ip addresses
        /// associated with the nat gateway resource.</param>
        /// <param name="publicIpPrefixes">An array of public ip prefixes
        /// associated with the nat gateway resource.</param>
        /// <param name="subnets">An array of references to the subnets using
        /// this nat gateway resource.</param>
        /// <param name="resourceGuid">The resource GUID property of the NAT
        /// gateway resource.</param>
        /// <param name="provisioningState">The provisioning state of the NAT
        /// gateway resource. Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'</param>
        /// <param name="zones">A list of availability zones denoting the zone
        /// in which Nat Gateway should be deployed.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public NatGatewayInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), NatGatewaySku sku = default(NatGatewaySku), int? idleTimeoutInMinutes = default(int?), IList<Management.ResourceManager.Fluent.SubResource> publicIpAddresses = default(IList<Management.ResourceManager.Fluent.SubResource>), IList<Management.ResourceManager.Fluent.SubResource> publicIpPrefixes = default(IList<Management.ResourceManager.Fluent.SubResource>), IList<Management.ResourceManager.Fluent.SubResource> subnets = default(IList<Management.ResourceManager.Fluent.SubResource>), string resourceGuid = default(string), ProvisioningState provisioningState = default(ProvisioningState), IList<string> zones = default(IList<string>), string etag = default(string))
            : base(location, id, name, type, tags)
        {
            Sku = sku;
            IdleTimeoutInMinutes = idleTimeoutInMinutes;
            PublicIpAddresses = publicIpAddresses;
            PublicIpPrefixes = publicIpPrefixes;
            Subnets = subnets;
            ResourceGuid = resourceGuid;
            ProvisioningState = provisioningState;
            Zones = zones;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the nat gateway SKU.
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public NatGatewaySku Sku { get; set; }

        /// <summary>
        /// Gets or sets the idle timeout of the nat gateway.
        /// </summary>
        [JsonProperty(PropertyName = "properties.idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// Gets or sets an array of public ip addresses associated with the
        /// nat gateway resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicIpAddresses")]
        public IList<Management.ResourceManager.Fluent.SubResource> PublicIpAddresses { get; set; }

        /// <summary>
        /// Gets or sets an array of public ip prefixes associated with the nat
        /// gateway resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicIpPrefixes")]
        public IList<Management.ResourceManager.Fluent.SubResource> PublicIpPrefixes { get; set; }

        /// <summary>
        /// Gets an array of references to the subnets using this nat gateway
        /// resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.subnets")]
        public IList<Management.ResourceManager.Fluent.SubResource> Subnets { get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the NAT gateway resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid { get; private set; }

        /// <summary>
        /// Gets the provisioning state of the NAT gateway resource. Possible
        /// values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets a list of availability zones denoting the zone in
        /// which Nat Gateway should be deployed.
        /// </summary>
        [JsonProperty(PropertyName = "zones")]
        public IList<string> Zones { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
