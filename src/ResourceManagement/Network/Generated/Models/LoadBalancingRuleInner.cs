// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A load balancing rule for a load balancer.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LoadBalancingRuleInner : Management.ResourceManager.Fluent.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the LoadBalancingRuleInner class.
        /// </summary>
        public LoadBalancingRuleInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LoadBalancingRuleInner class.
        /// </summary>
        /// <param name="protocol">The reference to the transport protocol used
        /// by the load balancing rule. Possible values include: 'Udp', 'Tcp',
        /// 'All'</param>
        /// <param name="frontendPort">The port for the external endpoint. Port
        /// numbers for each rule must be unique within the Load Balancer.
        /// Acceptable values are between 0 and 65534. Note that value 0
        /// enables "Any Port".</param>
        /// <param name="frontendIPConfiguration">A reference to frontend IP
        /// addresses.</param>
        /// <param name="backendAddressPool">A reference to a pool of DIPs.
        /// Inbound traffic is randomly load balanced across IPs in the backend
        /// IPs.</param>
        /// <param name="probe">The reference of the load balancer probe used
        /// by the load balancing rule.</param>
        /// <param name="loadDistribution">The load distribution policy for
        /// this rule. Possible values include: 'Default', 'SourceIP',
        /// 'SourceIPProtocol'</param>
        /// <param name="backendPort">The port used for internal connections on
        /// the endpoint. Acceptable values are between 0 and 65535. Note that
        /// value 0 enables "Any Port".</param>
        /// <param name="idleTimeoutInMinutes">The timeout for the TCP idle
        /// connection. The value can be set between 4 and 30 minutes. The
        /// default value is 4 minutes. This element is only used when the
        /// protocol is set to TCP.</param>
        /// <param name="enableFloatingIP">Configures a virtual machine's
        /// endpoint for the floating IP capability required to configure a SQL
        /// AlwaysOn Availability Group. This setting is required when using
        /// the SQL AlwaysOn Availability Groups in SQL server. This setting
        /// can't be changed after you create the endpoint.</param>
        /// <param name="enableTcpReset">Receive bidirectional TCP Reset on TCP
        /// flow idle timeout or unexpected connection termination. This
        /// element is only used when the protocol is set to TCP.</param>
        /// <param name="disableOutboundSnat">Configures SNAT for the VMs in
        /// the backend pool to use the publicIP address specified in the
        /// frontend of the load balancing rule.</param>
        /// <param name="provisioningState">The provisioning state of the load
        /// balancing rule resource. Possible values include: 'Succeeded',
        /// 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="name">The name of the resource that is unique within
        /// the set of load balancing rules used by the load balancer. This
        /// name can be used to access the resource.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        /// <param name="type">Type of the resource.</param>
        public LoadBalancingRuleInner(TransportProtocol protocol, int frontendPort, string id = default(string), Management.ResourceManager.Fluent.SubResource frontendIPConfiguration = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource backendAddressPool = default(Management.ResourceManager.Fluent.SubResource), Management.ResourceManager.Fluent.SubResource probe = default(Management.ResourceManager.Fluent.SubResource), LoadDistribution loadDistribution = default(LoadDistribution), int? backendPort = default(int?), int? idleTimeoutInMinutes = default(int?), bool? enableFloatingIP = default(bool?), bool? enableTcpReset = default(bool?), bool? disableOutboundSnat = default(bool?), ProvisioningState provisioningState = default(ProvisioningState), string name = default(string), string etag = default(string), string type = default(string))
            : base(id)
        {
            FrontendIPConfiguration = frontendIPConfiguration;
            BackendAddressPool = backendAddressPool;
            Probe = probe;
            Protocol = protocol;
            LoadDistribution = loadDistribution;
            FrontendPort = frontendPort;
            BackendPort = backendPort;
            IdleTimeoutInMinutes = idleTimeoutInMinutes;
            EnableFloatingIP = enableFloatingIP;
            EnableTcpReset = enableTcpReset;
            DisableOutboundSnat = disableOutboundSnat;
            ProvisioningState = provisioningState;
            Name = name;
            Etag = etag;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a reference to frontend IP addresses.
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontendIPConfiguration")]
        public Management.ResourceManager.Fluent.SubResource FrontendIPConfiguration { get; set; }

        /// <summary>
        /// Gets or sets a reference to a pool of DIPs. Inbound traffic is
        /// randomly load balanced across IPs in the backend IPs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.backendAddressPool")]
        public Management.ResourceManager.Fluent.SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Gets or sets the reference of the load balancer probe used by the
        /// load balancing rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.probe")]
        public Management.ResourceManager.Fluent.SubResource Probe { get; set; }

        /// <summary>
        /// Gets or sets the reference to the transport protocol used by the
        /// load balancing rule. Possible values include: 'Udp', 'Tcp', 'All'
        /// </summary>
        [JsonProperty(PropertyName = "properties.protocol")]
        public TransportProtocol Protocol { get; set; }

        /// <summary>
        /// Gets or sets the load distribution policy for this rule. Possible
        /// values include: 'Default', 'SourceIP', 'SourceIPProtocol'
        /// </summary>
        [JsonProperty(PropertyName = "properties.loadDistribution")]
        public LoadDistribution LoadDistribution { get; set; }

        /// <summary>
        /// Gets or sets the port for the external endpoint. Port numbers for
        /// each rule must be unique within the Load Balancer. Acceptable
        /// values are between 0 and 65534. Note that value 0 enables "Any
        /// Port".
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontendPort")]
        public int FrontendPort { get; set; }

        /// <summary>
        /// Gets or sets the port used for internal connections on the
        /// endpoint. Acceptable values are between 0 and 65535. Note that
        /// value 0 enables "Any Port".
        /// </summary>
        [JsonProperty(PropertyName = "properties.backendPort")]
        public int? BackendPort { get; set; }

        /// <summary>
        /// Gets or sets the timeout for the TCP idle connection. The value can
        /// be set between 4 and 30 minutes. The default value is 4 minutes.
        /// This element is only used when the protocol is set to TCP.
        /// </summary>
        [JsonProperty(PropertyName = "properties.idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// Gets or sets configures a virtual machine's endpoint for the
        /// floating IP capability required to configure a SQL AlwaysOn
        /// Availability Group. This setting is required when using the SQL
        /// AlwaysOn Availability Groups in SQL server. This setting can't be
        /// changed after you create the endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableFloatingIP")]
        public bool? EnableFloatingIP { get; set; }

        /// <summary>
        /// Gets or sets receive bidirectional TCP Reset on TCP flow idle
        /// timeout or unexpected connection termination. This element is only
        /// used when the protocol is set to TCP.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableTcpReset")]
        public bool? EnableTcpReset { get; set; }

        /// <summary>
        /// Gets or sets configures SNAT for the VMs in the backend pool to use
        /// the publicIP address specified in the frontend of the load
        /// balancing rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.disableOutboundSnat")]
        public bool? DisableOutboundSnat { get; set; }

        /// <summary>
        /// Gets the provisioning state of the load balancing rule resource.
        /// Possible values include: 'Succeeded', 'Updating', 'Deleting',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the name of the resource that is unique within the set
        /// of load balancing rules used by the load balancer. This name can be
        /// used to access the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Protocol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Protocol");
            }
        }
    }
}
