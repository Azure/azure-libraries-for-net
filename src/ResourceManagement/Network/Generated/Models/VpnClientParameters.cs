// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Vpn Client Parameters for package generation.
    /// </summary>
    public partial class VpnClientParameters
    {
        /// <summary>
        /// Initializes a new instance of the VpnClientParameters class.
        /// </summary>
        public VpnClientParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VpnClientParameters class.
        /// </summary>
        /// <param name="processorArchitecture">VPN client Processor
        /// Architecture. Possible values include: 'Amd64', 'X86'</param>
        /// <param name="authenticationMethod">VPN client authentication
        /// method. Possible values include: 'EAPTLS', 'EAPMSCHAPv2'</param>
        /// <param name="radiusServerAuthCertificate">The public certificate
        /// data for the radius server authentication certificate as a Base-64
        /// encoded string. Required only if external radius authentication has
        /// been configured with EAPTLS authentication.</param>
        /// <param name="clientRootCertificates">A list of client root
        /// certificates public certificate data encoded as Base-64 strings.
        /// Optional parameter for external radius based authentication with
        /// EAPTLS.</param>
        public VpnClientParameters(ProcessorArchitecture processorArchitecture = default(ProcessorArchitecture), AuthenticationMethod authenticationMethod = default(AuthenticationMethod), string radiusServerAuthCertificate = default(string), IList<string> clientRootCertificates = default(IList<string>))
        {
            ProcessorArchitecture = processorArchitecture;
            AuthenticationMethod = authenticationMethod;
            RadiusServerAuthCertificate = radiusServerAuthCertificate;
            ClientRootCertificates = clientRootCertificates;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets VPN client Processor Architecture. Possible values
        /// include: 'Amd64', 'X86'
        /// </summary>
        [JsonProperty(PropertyName = "processorArchitecture")]
        public ProcessorArchitecture ProcessorArchitecture { get; set; }

        /// <summary>
        /// Gets or sets VPN client authentication method. Possible values
        /// include: 'EAPTLS', 'EAPMSCHAPv2'
        /// </summary>
        [JsonProperty(PropertyName = "authenticationMethod")]
        public AuthenticationMethod AuthenticationMethod { get; set; }

        /// <summary>
        /// Gets or sets the public certificate data for the radius server
        /// authentication certificate as a Base-64 encoded string. Required
        /// only if external radius authentication has been configured with
        /// EAPTLS authentication.
        /// </summary>
        [JsonProperty(PropertyName = "radiusServerAuthCertificate")]
        public string RadiusServerAuthCertificate { get; set; }

        /// <summary>
        /// Gets or sets a list of client root certificates public certificate
        /// data encoded as Base-64 strings. Optional parameter for external
        /// radius based authentication with EAPTLS.
        /// </summary>
        [JsonProperty(PropertyName = "clientRootCertificates")]
        public IList<string> ClientRootCertificates { get; set; }

    }
}
