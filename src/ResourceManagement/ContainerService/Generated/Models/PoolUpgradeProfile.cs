// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerService.Fluent.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The list of available upgrade versions.
    /// </summary>
    public partial class PoolUpgradeProfile
    {
        /// <summary>
        /// Initializes a new instance of the PoolUpgradeProfile class.
        /// </summary>
        public PoolUpgradeProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PoolUpgradeProfile class.
        /// </summary>
        /// <param name="orchestratorVersion">Orchestrator version (major,
        /// minor, patch).</param>
        /// <param name="osType">OsType to be used to specify os type. Choose
        /// from Linux and Windows. Default to Linux. Possible values include:
        /// 'Linux', 'Windows'</param>
        /// <param name="name">Pool name.</param>
        public PoolUpgradeProfile(string orchestratorVersion, string osType, string name = default(string), IList<OrchestratorProfile> upgrades = default(IList<OrchestratorProfile>))
        {
            OrchestratorVersion = orchestratorVersion;
            Name = name;
            OsType = osType;
            Upgrades = upgrades;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for PoolUpgradeProfile class.
        /// </summary>
        static PoolUpgradeProfile()
        {
            OrchestratorType = "Kubernetes";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets orchestrator version (major, minor, patch).
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorVersion")]
        public string OrchestratorVersion { get; set; }

        /// <summary>
        /// Gets or sets pool name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets osType to be used to specify os type. Choose from
        /// Linux and Windows. Default to Linux. Possible values include:
        /// 'Linux', 'Windows'
        /// </summary>
        [JsonProperty(PropertyName = "osType")]
        public string OsType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "upgrades")]
        public IList<OrchestratorProfile> Upgrades { get; set; }

        /// <summary>
        /// Orchestrator type.
        /// </summary>
        [JsonProperty(PropertyName = "orchestratorType")]
        public static string OrchestratorType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OrchestratorVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrchestratorVersion");
            }
            if (OsType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OsType");
            }
            if (Upgrades != null)
            {
                foreach (var element in Upgrades)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
