// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Fluent.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The policy definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PolicyDefinitionInner : Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the PolicyDefinitionInner class.
        /// </summary>
        public PolicyDefinitionInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyDefinitionInner class.
        /// </summary>
        /// <param name="policyType">The type of policy definition. Possible
        /// values are NotSpecified, BuiltIn, and Custom. Possible values
        /// include: 'NotSpecified', 'BuiltIn', 'Custom'</param>
        /// <param name="mode">The policy definition mode. Some examples are
        /// All, Indexed, Microsoft.KeyVault.Data.</param>
        /// <param name="displayName">The display name of the policy
        /// definition.</param>
        /// <param name="description">The policy definition
        /// description.</param>
        /// <param name="policyRule">The policy rule.</param>
        /// <param name="metadata">The policy definition metadata.</param>
        /// <param name="parameters">Required if a parameter is used in policy
        /// rule.</param>
        public PolicyDefinitionInner(string id = default(string), string name = default(string), string type = default(string), PolicyType policyType = default(PolicyType), string mode = default(string), string displayName = default(string), string description = default(string), object policyRule = default(object), object metadata = default(object), object parameters = default(object))
            : base(default(string), id, name, type)
        {
            PolicyType = policyType;
            Mode = mode;
            DisplayName = displayName;
            Description = description;
            PolicyRule = policyRule;
            Metadata = metadata;
            Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of policy definition. Possible values are
        /// NotSpecified, BuiltIn, and Custom. Possible values include:
        /// 'NotSpecified', 'BuiltIn', 'Custom'
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyType")]
        public PolicyType PolicyType { get; set; }

        /// <summary>
        /// Gets or sets the policy definition mode. Some examples are All,
        /// Indexed, Microsoft.KeyVault.Data.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets the display name of the policy definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the policy definition description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the policy rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyRule")]
        public object PolicyRule { get; set; }

        /// <summary>
        /// Gets or sets the policy definition metadata.
        /// </summary>
        [JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata { get; set; }

        /// <summary>
        /// Gets or sets required if a parameter is used in policy rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.parameters")]
        public object Parameters { get; set; }

    }
}
