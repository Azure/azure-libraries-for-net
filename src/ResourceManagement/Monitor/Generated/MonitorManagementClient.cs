// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Fluent
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Azure.Management.ResourceManager.Fluent.Core;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Monitor Management Client
    /// </summary>
    public partial class MonitorManagementClient : Management.ResourceManager.Fluent.Core.FluentServiceClientBase<MonitorManagementClient>, IMonitorManagementClient, IAzureClient
    {
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// The Azure subscription Id.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IAutoscaleSettingsOperations.
        /// </summary>
        public virtual IAutoscaleSettingsOperations AutoscaleSettings { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IAlertRuleIncidentsOperations.
        /// </summary>
        public virtual IAlertRuleIncidentsOperations AlertRuleIncidents { get; private set; }

        /// <summary>
        /// Gets the IAlertRulesOperations.
        /// </summary>
        public virtual IAlertRulesOperations AlertRules { get; private set; }

        /// <summary>
        /// Gets the ILogProfilesOperations.
        /// </summary>
        public virtual ILogProfilesOperations LogProfiles { get; private set; }

        /// <summary>
        /// Gets the IDiagnosticSettingsOperations.
        /// </summary>
        public virtual IDiagnosticSettingsOperations DiagnosticSettings { get; private set; }

        /// <summary>
        /// Gets the ISubscriptionDiagnosticSettingsOperations.
        /// </summary>
        public virtual ISubscriptionDiagnosticSettingsOperations SubscriptionDiagnosticSettings { get; private set; }

        /// <summary>
        /// Gets the IDiagnosticSettingsCategoryOperations.
        /// </summary>
        public virtual IDiagnosticSettingsCategoryOperations DiagnosticSettingsCategory { get; private set; }

        /// <summary>
        /// Gets the IActionGroupsOperations.
        /// </summary>
        public virtual IActionGroupsOperations ActionGroups { get; private set; }

        /// <summary>
        /// Gets the IActivityLogAlertsOperations.
        /// </summary>
        public virtual IActivityLogAlertsOperations ActivityLogAlerts { get; private set; }

        /// <summary>
        /// Gets the IActivityLogsOperations.
        /// </summary>
        public virtual IActivityLogsOperations ActivityLogs { get; private set; }

        /// <summary>
        /// Gets the IEventCategoriesOperations.
        /// </summary>
        public virtual IEventCategoriesOperations EventCategories { get; private set; }

        /// <summary>
        /// Gets the ITenantActivityLogsOperations.
        /// </summary>
        public virtual ITenantActivityLogsOperations TenantActivityLogs { get; private set; }

        /// <summary>
        /// Gets the IMetricDefinitionsOperations.
        /// </summary>
        public virtual IMetricDefinitionsOperations MetricDefinitions { get; private set; }

        /// <summary>
        /// Gets the IMetricsOperations.
        /// </summary>
        public virtual IMetricsOperations Metrics { get; private set; }

        /// <summary>
        /// Gets the IMetricBaselineOperations.
        /// </summary>
        public virtual IMetricBaselineOperations MetricBaseline { get; private set; }

        /// <summary>
        /// Gets the IBaselinesOperations.
        /// </summary>
        public virtual IBaselinesOperations Baselines { get; private set; }

        /// <summary>
        /// Gets the IMetricAlertsOperations.
        /// </summary>
        public virtual IMetricAlertsOperations MetricAlerts { get; private set; }

        /// <summary>
        /// Gets the IMetricAlertsStatusOperations.
        /// </summary>
        public virtual IMetricAlertsStatusOperations MetricAlertsStatus { get; private set; }

        /// <summary>
        /// Gets the IScheduledQueryRulesOperations.
        /// </summary>
        public virtual IScheduledQueryRulesOperations ScheduledQueryRules { get; private set; }

        /// <summary>
        /// Gets the IMetricNamespacesOperations.
        /// </summary>
        public virtual IMetricNamespacesOperations MetricNamespaces { get; private set; }

        /// <summary>
        /// Gets the IVMInsightsOperations.
        /// </summary>
        public virtual IVMInsightsOperations VMInsights { get; private set; }

        /// <summary>
        /// Initializes a new instance of the MonitorManagementClient class.
        /// </summary>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public MonitorManagementClient(RestClient restClient) : base(restClient)
        {
        }

        private MonitorManagementClient(RestClient restClient, System.Net.Http.HttpClient httpClient) : base(restClient, httpClient)
        {
        }

        public static MonitorManagementClient NewInstance(RestClient restClient)
        {
            return restClient.HttpClient == null ? new MonitorManagementClient(restClient) : new MonitorManagementClient(restClient, restClient.HttpClient);
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        protected override void Initialize()
        {
            AutoscaleSettings = new AutoscaleSettingsOperations(this);
            Operations = new Operations(this);
            AlertRuleIncidents = new AlertRuleIncidentsOperations(this);
            AlertRules = new AlertRulesOperations(this);
            LogProfiles = new LogProfilesOperations(this);
            DiagnosticSettings = new DiagnosticSettingsOperations(this);
            SubscriptionDiagnosticSettings = new SubscriptionDiagnosticSettingsOperations(this);
            DiagnosticSettingsCategory = new DiagnosticSettingsCategoryOperations(this);
            ActionGroups = new ActionGroupsOperations(this);
            ActivityLogAlerts = new ActivityLogAlertsOperations(this);
            ActivityLogs = new ActivityLogsOperations(this);
            EventCategories = new EventCategoriesOperations(this);
            TenantActivityLogs = new TenantActivityLogsOperations(this);
            MetricDefinitions = new MetricDefinitionsOperations(this);
            Metrics = new MetricsOperations(this);
            MetricBaseline = new MetricBaselineOperations(this);
            Baselines = new BaselinesOperations(this);
            MetricAlerts = new MetricAlertsOperations(this);
            MetricAlertsStatus = new MetricAlertsStatusOperations(this);
            ScheduledQueryRules = new ScheduledQueryRulesOperations(this);
            MetricNamespaces = new MetricNamespacesOperations(this);
            VMInsights = new VMInsightsOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RuleDataSource>("odata.type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RuleDataSource>("odata.type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RuleCondition>("odata.type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RuleCondition>("odata.type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<RuleAction>("odata.type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<RuleAction>("odata.type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<MetricAlertCriteria>("odata.type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<MetricAlertCriteria>("odata.type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<MultiMetricCriteria>("criterionType"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<MultiMetricCriteria>("criterionType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Action>("odata.type"));
            DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<Action>("odata.type"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
