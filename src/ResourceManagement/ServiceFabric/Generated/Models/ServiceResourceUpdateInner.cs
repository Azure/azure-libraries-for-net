// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.ServiceFabric.Fluent.Models
{
    using Newtonsoft.Json;
    using System.Collections.Generic;

    /// <summary>
    /// The service resource for patch operations.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ServiceResourceUpdateInner : Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the ServiceResourceUpdateInner class.
        /// </summary>
        public ServiceResourceUpdateInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceResourceUpdateInner class.
        /// </summary>
        /// <param name="placementConstraints">The placement constraints as a
        /// string. Placement constraints are boolean expressions on node
        /// properties and allow for restricting a service to particular nodes
        /// based on the service requirements. For example, to place a service
        /// on nodes where NodeType is blue specify the following: "NodeColor
        /// == blue)".</param>
        /// <param name="correlationScheme">A list that describes the
        /// correlation of the service with other services.</param>
        /// <param name="serviceLoadMetrics">The service load metrics is given
        /// as an array of ServiceLoadMetricDescription objects.</param>
        /// <param name="servicePlacementPolicies">A list that describes the
        /// correlation of the service with other services.</param>
        /// <param name="defaultMoveCost">Specifies the move cost for the
        /// service. Possible values include: 'Zero', 'Low', 'Medium',
        /// 'High'</param>
        /// <param name="location">It will be deprecated in New API, resource
        /// location depends on the parent resource.</param>
        /// <param name="tags">Azure resource tags.</param>
        /// <param name="etag">Azure resource etag.</param>
        public ServiceResourceUpdateInner(string id = default(string), string name = default(string), string type = default(string), string placementConstraints = default(string), IList<ServiceCorrelationDescription> correlationScheme = default(IList<ServiceCorrelationDescription>), IList<ServiceLoadMetricDescription> serviceLoadMetrics = default(IList<ServiceLoadMetricDescription>), IList<ServicePlacementPolicyDescription> servicePlacementPolicies = default(IList<ServicePlacementPolicyDescription>), MoveCost defaultMoveCost = default(MoveCost), string location = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string etag = default(string))
            : base(id, name, type)
        {
            PlacementConstraints = placementConstraints;
            CorrelationScheme = correlationScheme;
            ServiceLoadMetrics = serviceLoadMetrics;
            ServicePlacementPolicies = servicePlacementPolicies;
            DefaultMoveCost = defaultMoveCost;
            Location = location;
            Tags = tags;
            Etag = etag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the placement constraints as a string. Placement
        /// constraints are boolean expressions on node properties and allow
        /// for restricting a service to particular nodes based on the service
        /// requirements. For example, to place a service on nodes where
        /// NodeType is blue specify the following: "NodeColor == blue)".
        /// </summary>
        [JsonProperty(PropertyName = "properties.placementConstraints")]
        public string PlacementConstraints { get; set; }

        /// <summary>
        /// Gets or sets a list that describes the correlation of the service
        /// with other services.
        /// </summary>
        [JsonProperty(PropertyName = "properties.correlationScheme")]
        public IList<ServiceCorrelationDescription> CorrelationScheme { get; set; }

        /// <summary>
        /// Gets or sets the service load metrics is given as an array of
        /// ServiceLoadMetricDescription objects.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceLoadMetrics")]
        public IList<ServiceLoadMetricDescription> ServiceLoadMetrics { get; set; }

        /// <summary>
        /// Gets or sets a list that describes the correlation of the service
        /// with other services.
        /// </summary>
        [JsonProperty(PropertyName = "properties.servicePlacementPolicies")]
        public IList<ServicePlacementPolicyDescription> ServicePlacementPolicies { get; set; }

        /// <summary>
        /// Gets or sets specifies the move cost for the service. Possible
        /// values include: 'Zero', 'Low', 'Medium', 'High'
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultMoveCost")]
        public MoveCost DefaultMoveCost { get; set; }

        /// <summary>
        /// Gets or sets it will be deprecated in New API, resource location
        /// depends on the parent resource.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets azure resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets azure resource etag.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

    }
}
