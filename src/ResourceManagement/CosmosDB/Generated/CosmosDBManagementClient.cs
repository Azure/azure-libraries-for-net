// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.CosmosDB.Fluent
{
    using Microsoft.Azure.Management.ResourceManager;
    using Microsoft.Azure.Management.ResourceManager.Fluent;
    using Microsoft.Azure.Management.ResourceManager.Fluent.Core;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure Cosmos DB Database Service Resource Provider REST API
    /// </summary>
    public partial class CosmosDBManagementClient : Management.ResourceManager.Fluent.Core.FluentServiceClientBase<CosmosDBManagementClient>, ICosmosDBManagementClient, IAzureClient
    {
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Azure subscription ID.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        public string SubscriptionId1 { get; set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IDatabaseAccountsOperations.
        /// </summary>
        public virtual IDatabaseAccountsOperations DatabaseAccounts { get; private set; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        public virtual IOperations Operations { get; private set; }

        /// <summary>
        /// Gets the IDatabaseOperations.
        /// </summary>
        public virtual IDatabaseOperations Database { get; private set; }

        /// <summary>
        /// Gets the ICollectionOperations.
        /// </summary>
        public virtual ICollectionOperations Collection { get; private set; }

        /// <summary>
        /// Gets the ICollectionRegionOperations.
        /// </summary>
        public virtual ICollectionRegionOperations CollectionRegion { get; private set; }

        /// <summary>
        /// Gets the IDatabaseAccountRegionOperations.
        /// </summary>
        public virtual IDatabaseAccountRegionOperations DatabaseAccountRegion { get; private set; }

        /// <summary>
        /// Gets the IPercentileSourceTargetOperations.
        /// </summary>
        public virtual IPercentileSourceTargetOperations PercentileSourceTarget { get; private set; }

        /// <summary>
        /// Gets the IPercentileTargetOperations.
        /// </summary>
        public virtual IPercentileTargetOperations PercentileTarget { get; private set; }

        /// <summary>
        /// Gets the IPercentileOperations.
        /// </summary>
        public virtual IPercentileOperations Percentile { get; private set; }

        /// <summary>
        /// Gets the ICollectionPartitionRegionOperations.
        /// </summary>
        public virtual ICollectionPartitionRegionOperations CollectionPartitionRegion { get; private set; }

        /// <summary>
        /// Gets the ICollectionPartitionOperations.
        /// </summary>
        public virtual ICollectionPartitionOperations CollectionPartition { get; private set; }

        /// <summary>
        /// Gets the IPartitionKeyRangeIdOperations.
        /// </summary>
        public virtual IPartitionKeyRangeIdOperations PartitionKeyRangeId { get; private set; }

        /// <summary>
        /// Gets the IPartitionKeyRangeIdRegionOperations.
        /// </summary>
        public virtual IPartitionKeyRangeIdRegionOperations PartitionKeyRangeIdRegion { get; private set; }

        /// <summary>
        /// Gets the ISqlResourcesOperations.
        /// </summary>
        public virtual ISqlResourcesOperations SqlResources { get; private set; }

        /// <summary>
        /// Gets the IMongoDBResourcesOperations.
        /// </summary>
        public virtual IMongoDBResourcesOperations MongoDBResources { get; private set; }

        /// <summary>
        /// Gets the ITableResourcesOperations.
        /// </summary>
        public virtual ITableResourcesOperations TableResources { get; private set; }

        /// <summary>
        /// Gets the ICassandraResourcesOperations.
        /// </summary>
        public virtual ICassandraResourcesOperations CassandraResources { get; private set; }

        /// <summary>
        /// Gets the IGremlinResourcesOperations.
        /// </summary>
        public virtual IGremlinResourcesOperations GremlinResources { get; private set; }

        /// <summary>
        /// Gets the IPrivateLinkResourcesOperations.
        /// </summary>
        public virtual IPrivateLinkResourcesOperations PrivateLinkResources { get; private set; }

        /// <summary>
        /// Gets the IPrivateEndpointConnectionsOperations.
        /// </summary>
        public virtual IPrivateEndpointConnectionsOperations PrivateEndpointConnections { get; private set; }

        /// <summary>
        /// Initializes a new instance of the CosmosDBManagementClient class.
        /// </summary>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public CosmosDBManagementClient(RestClient restClient) : base(restClient)
        {
        }

        private CosmosDBManagementClient(RestClient restClient, System.Net.Http.HttpClient httpClient) : base(restClient, httpClient)
        {
        }

        public static CosmosDBManagementClient NewInstance(RestClient restClient)
        {
            return restClient.HttpClient == null ? new CosmosDBManagementClient(restClient) : new CosmosDBManagementClient(restClient, restClient.HttpClient);
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        protected override void Initialize()
        {
            DatabaseAccounts = new DatabaseAccountsOperations(this);
            Operations = new Operations(this);
            Database = new DatabaseOperations(this);
            Collection = new CollectionOperations(this);
            CollectionRegion = new CollectionRegionOperations(this);
            DatabaseAccountRegion = new DatabaseAccountRegionOperations(this);
            PercentileSourceTarget = new PercentileSourceTargetOperations(this);
            PercentileTarget = new PercentileTargetOperations(this);
            Percentile = new PercentileOperations(this);
            CollectionPartitionRegion = new CollectionPartitionRegionOperations(this);
            CollectionPartition = new CollectionPartitionOperations(this);
            PartitionKeyRangeId = new PartitionKeyRangeIdOperations(this);
            PartitionKeyRangeIdRegion = new PartitionKeyRangeIdRegionOperations(this);
            SqlResources = new SqlResourcesOperations(this);
            MongoDBResources = new MongoDBResourcesOperations(this);
            TableResources = new TableResourcesOperations(this);
            CassandraResources = new CassandraResourcesOperations(this);
            GremlinResources = new GremlinResourcesOperations(this);
            PrivateLinkResources = new PrivateLinkResourcesOperations(this);
            PrivateEndpointConnections = new PrivateEndpointConnectionsOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
