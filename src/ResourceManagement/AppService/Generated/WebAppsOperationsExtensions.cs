// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.AppService.Fluent
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebAppsOperations.
    /// </summary>
    public static partial class WebAppsOperationsExtensions
    {
            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListAsync(this IWebAppsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Description for Gets all web, mobile, and API apps in the specified
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='includeSlots'>
            /// Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in
            /// results. The default is false, which only gives you the production slot of
            /// all apps.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListByResourceGroupAsync(this IWebAppsOperations operations, string resourceGroupName, bool? includeSlots = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, includeSlots, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> GetAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new web, mobile, or API app in an existing
            /// resource group, or updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> CreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a web, mobile, or API app, or one of the deployment
            /// slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted.
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify false if you want to keep empty App Service plan. By default, empty
            /// App Service plan is deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new web, mobile, or API app in an existing
            /// resource group, or updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> UpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SitePatchResource siteEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Description for Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomHostnameAnalysisResultInner> AnalyzeCustomHostnameAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for Applies the configuration settings from the target slot
            /// onto the current slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApplySlotConfigToProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApplySlotConfigToProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action as
            /// input here.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemInner> BackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListBackupsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Description for Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemInner> GetBackupStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteBackupWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </summary>
            /// <remarks>
            /// Description for Gets status of a web app backup that may be in progress,
            /// including secrets associated with the backup, such as the Azure Storage SAS
            /// URL. Also can be used to update the SAS URL for the backup if a new URL is
            /// passed in the request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='backupId'>
            /// ID of backup.
            /// </param>
            /// <param name='request'>
            /// Information on backup request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemInner> ListBackupStatusSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Restores a specific backup to another app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List the configurations of an app
            /// </summary>
            /// <remarks>
            /// Description for List the configurations of an app
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigResourceInner>> ListConfigurationsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> UpdateApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner appSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> ListApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the Authentication / Authorization settings
            /// associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettingsInner> UpdateAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsInner siteAuthSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettingsInner> GetAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Azure storage account configurations of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the Azure storage account configurations of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='azureStorageAccounts'>
            /// Azure storage accounts of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureStoragePropertyDictionaryResourceInner> UpdateAzureStorageAccountsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAzureStorageAccountsWithHttpMessagesAsync(resourceGroupName, name, azureStorageAccounts, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Azure storage account configurations of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Azure storage account configurations of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureStoragePropertyDictionaryResourceInner> ListAzureStorageAccountsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAzureStorageAccountsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequestInner> UpdateBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequestInner> GetBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the config reference app settings and status of an app
            /// </summary>
            /// <remarks>
            /// Description for Gets the config reference app settings and status of an app
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyVaultReferenceCollectionInner> GetAppSettingsKeyVaultReferencesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppSettingsKeyVaultReferencesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the config reference and status of an app
            /// </summary>
            /// <remarks>
            /// Description for Gets the config reference and status of an app
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettingKey'>
            /// App Setting key name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<KeyVaultReferenceResourceInner> GetAppSettingKeyVaultReferenceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string appSettingKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppSettingKeyVaultReferenceWithHttpMessagesAsync(resourceGroupName, name, appSettingKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionaryInner> UpdateConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionaryInner connectionStrings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionaryInner> ListConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfigInner> GetDiagnosticLogsConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfigInner> UpdateDiagnosticLogsConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfigInner siteLogsConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Description for Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> UpdateMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner metadata, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataWithHttpMessagesAsync(resourceGroupName, name, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> ListMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetadataWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInner> ListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettingsInner> UpdateSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettingsInner pushSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, pushSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettingsInner> ListSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </summary>
            /// <remarks>
            /// Description for Gets the names of app settings and connection strings that
            /// stick to the slot (not swapped).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNamesResourceInner> ListSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the names of application settings and connection string that remain
            /// with the slot during swap operation.
            /// </summary>
            /// <remarks>
            /// Description for Updates the names of application settings and connection
            /// string that remain with the slot during swap operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotConfigNames'>
            /// Names of application settings and connection strings. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNamesResourceInner> UpdateSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResourceInner slotConfigNames, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, slotConfigNames, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Description for Gets the configuration of an app, such as platform version
            /// and bitness, default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> GetConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> CreateOrUpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResourceInner siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> UpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResourceInner siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a list of web app configuration snapshots identifiers.
            /// Each element of the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationSnapshotInfoWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </summary>
            /// <remarks>
            /// Description for Gets a snapshot of the configuration of an app at a
            /// previous point in time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> GetConfigurationSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSnapshotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Reverts the configuration of an app to a previous snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoverSiteConfigurationSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RecoverSiteConfigurationSnapshotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the last lines of docker logs for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the last lines of docker logs for the given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetWebSiteContainerLogsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetWebSiteContainerLogsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Gets the ZIP archived docker log files for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the ZIP archived docker log files for the given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetContainerLogsZipAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetContainerLogsZipWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// List continuous web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List continuous web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContinuousWebJobInner>> ListContinuousWebJobsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContinuousWebJobsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a continuous web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a continuous web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContinuousWebJobInner> GetContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a continuous web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a continuous web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start a continuous web job for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Start a continuous web job for an app, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop a continuous web job for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Stop a continuous web job for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopContinuousWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopContinuousWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List deployments for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentInner>> ListDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get a deployment by its ID for an app, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentInner> GetDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Create a deployment for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentInner> CreateDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, DeploymentInner deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a deployment by its ID for an app, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List deployment log for specific deployment for an app, or a deployment
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for List deployment log for specific deployment for an app, or
            /// a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// The ID of a specific deployment. This is the value of the name property in
            /// the JSON response from "GET /api/sites/{siteName}/deployments".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentInner> ListDeploymentLogAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentLogWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage. Use this to get information about the databases stored in a
            /// backup.
            /// </summary>
            /// <remarks>
            /// Description for Discovers an existing app backup that can be restored from
            /// a blob in Azure storage. Use this to get information about the databases
            /// stored in a backup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequestInner> DiscoverBackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverBackupWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Lists ownership identifiers for domain associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IdentifierInner>> ListDomainOwnershipIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Description for Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentifierInner> GetDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Description for Creates a domain ownership identifier for web app, or
            /// updates an existing ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentifierInner> CreateOrUpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Description for Creates a domain ownership identifier for web app, or
            /// updates an existing ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentifierInner> UpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the status of the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the status of the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> GetMSDeployStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMSDeployStatusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> CreateMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the MSDeploy Log for the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the MSDeploy Log for the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployLogInner> GetMSDeployLogAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMSDeployLogWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the functions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List the functions for a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FunctionEnvelopeInner>> ListFunctionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFunctionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch a short lived token that can be exchanged for a master key.
            /// </summary>
            /// <remarks>
            /// Description for Fetch a short lived token that can be exchanged for a
            /// master key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetFunctionsAdminTokenAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFunctionsAdminTokenWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get function information by its ID for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get function information by its ID for web site, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionEnvelopeInner> GetFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create function for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Create function for web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='functionEnvelope'>
            /// Function details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionEnvelopeInner> CreateFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, FunctionEnvelopeInner functionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a function for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a function for web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get function secrets for a function in a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get function secrets for a function in a web site, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionSecretsInner> ListFunctionSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFunctionSecretsWithHttpMessagesAsync(resourceGroupName, name, functionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBindingInner>> ListHostNameBindingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Get the named hostname binding for an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBindingInner> GetHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBindingInner> CreateOrUpdateHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBindingInner hostNameBinding, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Description for Retrieves a specific Service Bus Hybrid Connection used by
            /// this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> GetHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> CreateOrUpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Description for Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> UpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Description for Retrieves all Service Bus Hybrid Connections used by this
            /// Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> ListHybridConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets hybrid connections configured for an app (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> ListRelayServiceConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Description for Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> GetRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Creates a new hybrid connection configuration (PUT), or
            /// updates an existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> CreateOrUpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Creates a new hybrid connection configuration (PUT), or
            /// updates an existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> UpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebSiteInstanceStatusInner> GetInstanceInfoAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceInfoWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the status of the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the status of the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> GetInstanceMsDeployStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceMsDeployStatusWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> CreateInstanceMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInstanceMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, instanceId, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the MSDeploy Log for the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the MSDeploy Log for the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployLogInner> GetInstanceMSDeployLogAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceMSDeployLogWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListInstanceProcessesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessesWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInfoInner> GetInstanceProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceProcessWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Terminate a process by its ID for a web site, or a deployment slot, or
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Terminate a process by its ID for a web site, or a
            /// deployment slot, or specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInstanceProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteInstanceProcessWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a memory dump of a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get a memory dump of a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetInstanceProcessDumpAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetInstanceProcessDumpWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListInstanceProcessModulesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessModulesWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='baseAddress'>
            /// Module base address.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessModuleInfoInner> GetInstanceProcessModuleAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceProcessModuleWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListInstanceProcessThreadsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessThreadsWithHttpMessagesAsync(resourceGroupName, name, processId, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Description for Shows whether an app can be cloned to another resource
            /// group or subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCloneabilityInner> IsCloneableAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCloneableWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListSiteBackupsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This is to allow calling via powershell and ARM template.
            /// </summary>
            /// <remarks>
            /// Description for This is to allow calling via powershell and ARM template.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionSecretsInner> ListSyncFunctionTriggersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSyncFunctionTriggersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Description for Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='migrationOptions'>
            /// Migration migrationOptions.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageMigrationResponseInner> MigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, migrationOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Description for Migrates a local (in-app) MySql database to a remote MySql
            /// database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationInner> MigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the status of MySql in app migration, if one is active, and whether
            /// or not MySql in app is enabled
            /// </summary>
            /// <remarks>
            /// Description for Returns the status of MySql in app migration, if one is
            /// active, and whether or not MySql in app is enabled
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrateMySqlStatusInner> GetMigrateMySqlStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMigrateMySqlStatusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Swift Virtual Network connection.
            /// </summary>
            /// <remarks>
            /// Description for Gets a Swift Virtual Network connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftVirtualNetworkInner> GetSwiftVirtualNetworkConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSwiftVirtualNetworkConnectionWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Integrates this Web App with a Virtual Network. This requires that 1)
            /// "swiftSupported" is true when doing a GET against this resource, and 2)
            /// that the target Subnet has already been delegated, and is not
            /// in use by another App Service Plan other than the one this App is in.
            /// </summary>
            /// <remarks>
            /// Description for Integrates this Web App with a Virtual Network. This
            /// requires that 1) "swiftSupported" is true when doing a GET against this
            /// resource, and 2) that the target Subnet has already been delegated, and is
            /// not
            /// in use by another App Service Plan other than the one this App is in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftVirtualNetworkInner> CreateOrUpdateSwiftVirtualNetworkConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetworkInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSwiftVirtualNetworkConnectionWithHttpMessagesAsync(resourceGroupName, name, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Swift Virtual Network connection from an app (or deployment
            /// slot).
            /// </summary>
            /// <remarks>
            /// Description for Deletes a Swift Virtual Network connection from an app (or
            /// deployment slot).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSwiftVirtualNetworkAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSwiftVirtualNetworkWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Integrates this Web App with a Virtual Network. This requires that 1)
            /// "swiftSupported" is true when doing a GET against this resource, and 2)
            /// that the target Subnet has already been delegated, and is not
            /// in use by another App Service Plan other than the one this App is in.
            /// </summary>
            /// <remarks>
            /// Description for Integrates this Web App with a Virtual Network. This
            /// requires that 1) "swiftSupported" is true when doing a GET against this
            /// resource, and 2) that the target Subnet has already been delegated, and is
            /// not
            /// in use by another App Service Plan other than the one this App is in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftVirtualNetworkInner> UpdateSwiftVirtualNetworkConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetworkInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSwiftVirtualNetworkConnectionWithHttpMessagesAsync(resourceGroupName, name, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets all network features used by the app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkFeaturesInner> ListNetworkFeaturesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesWithHttpMessagesAsync(resourceGroupName, name, view, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTraceOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTraceOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site (To be deprecated).
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site (To be
            /// deprecated).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> StartWebSiteNetworkTraceOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceOperationWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTracesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTracesWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTraceOperationV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTraceOperationV2WithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTracesV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTracesV2WithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Generates a new publishing password for an app (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateNewSitePublishingPasswordAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GenerateNewSitePublishingPasswordWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Description for Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and
            /// endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Description for Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SitePhpErrorLogFlagInner> GetSitePhpErrorLogFlagAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> ListPremierAddOnsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> GetPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> AddPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnInner premierAddOn, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Description for Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> UpdatePremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnPatchResource premierAddOn, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets data around private site access enablement and authorized Virtual
            /// Networks that can access the site.
            /// </summary>
            /// <remarks>
            /// Description for Gets data around private site access enablement and
            /// authorized Virtual Networks that can access the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateAccessInner> GetPrivateAccessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPrivateAccessWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets data around private site access enablement and authorized Virtual
            /// Networks that can access the site.
            /// </summary>
            /// <remarks>
            /// Description for Sets data around private site access enablement and
            /// authorized Virtual Networks that can access the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='access'>
            /// The information for the private access
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateAccessInner> PutPrivateAccessVnetAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PrivateAccessInner access, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutPrivateAccessVnetWithHttpMessagesAsync(resourceGroupName, name, access, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListProcessesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInfoInner> GetProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Terminate a process by its ID for a web site, or a deployment slot, or
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Terminate a process by its ID for a web site, or a
            /// deployment slot, or specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProcessAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProcessWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a memory dump of a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get a memory dump of a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetProcessDumpAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetProcessDumpWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListProcessModulesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessModulesWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='baseAddress'>
            /// Module base address.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessModuleInfoInner> GetProcessModuleAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessModuleWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListProcessThreadsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessThreadsWithHttpMessagesAsync(resourceGroupName, name, processId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get public certificates for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get public certificates for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PublicCertificateInner>> ListPublicCertificatesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublicCertificatesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named public certificate for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Get the named public certificate for an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publicCertificateName'>
            /// Public certificate name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublicCertificateInner> GetPublicCertificateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublicCertificateWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publicCertificateName'>
            /// Public certificate name.
            /// </param>
            /// <param name='publicCertificate'>
            /// Public certificate details. This is the JSON representation of a
            /// PublicCertificate object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublicCertificateInner> CreateOrUpdatePublicCertificateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, PublicCertificateInner publicCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdatePublicCertificateWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, publicCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publicCertificateName'>
            /// Public certificate name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePublicCertificateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePublicCertificateWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets the publishing profile for an app (or deployment slot,
            /// if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publishingProfileOptions'>
            /// Specifies publishingProfileOptions for publishing profile. For example, use
            /// {"format": "FileZilla3"} to get a FileZilla publishing profile.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ListPublishingProfileXmlWithSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsWithHttpMessagesAsync(resourceGroupName, name, publishingProfileOptions, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Description for Resets the configuration settings of the current slot if
            /// they were previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetProductionSlotConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetProductionSlotConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartWithHttpMessagesAsync(resourceGroupName, name, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores an app from a backup blob in Azure Storage.
            /// </summary>
            /// <remarks>
            /// Description for Restores an app from a backup blob in Azure Storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreFromBackupBlobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreFromBackupBlobWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a deleted web app to this web app.
            /// </summary>
            /// <remarks>
            /// Description for Restores a deleted web app to this web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Deleted web app restore information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreFromDeletedAppAsync(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreFromDeletedAppWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a web app from a snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Restores a web app from a snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Snapshot restore settings. Snapshot information can be obtained by calling
            /// GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreSnapshotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of siteextensions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get list of siteextensions for a web site, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteExtensionInfoInner>> ListSiteExtensionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteExtensionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get site extension information by its ID for a web site, or a deployment
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for Get site extension information by its ID for a web site, or
            /// a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteExtensionInfoInner> GetSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Install site extension on a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Install site extension on a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteExtensionInfoInner> InstallSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InstallSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a site extension from a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Remove a site extension from a web site, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Copies a deployment slot to another deployment slot of an app.
            /// </summary>
            /// <remarks>
            /// Description for Copies a deployment slot to another deployment slot of an
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='copySlotEntity'>
            /// JSON object that contains the target slot name and site config properties
            /// to override the source slot config. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CopyProductionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmCopySlotEntity copySlotEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CopyProductionSlotWithHttpMessagesAsync(resourceGroupName, name, copySlotEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Description for Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListSlotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns the production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> GetSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new web, mobile, or API app in an existing
            /// resource group, or updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> CreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a web, mobile, or API app, or one of the deployment
            /// slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to delete. By default, the API deletes the
            /// production slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted.
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new web, mobile, or API app in an existing
            /// resource group, or updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> UpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SitePatchResource siteEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Description for Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomHostnameAnalysisResultInner> AnalyzeCustomHostnameSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for Applies the configuration settings from the target slot
            /// onto the current slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApplySlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApplySlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action as
            /// input here.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a backup for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemInner> BackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// backups of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListBackupsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Description for Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemInner> GetBackupStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteBackupSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can be
            /// used to update the SAS URL for the backup if a new URL is passed in the
            /// request body.
            /// </summary>
            /// <remarks>
            /// Description for Gets status of a web app backup that may be in progress,
            /// including secrets associated with the backup, such as the Azure Storage SAS
            /// URL. Also can be used to update the SAS URL for the backup if a new URL is
            /// passed in the request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='backupId'>
            /// ID of backup.
            /// </param>
            /// <param name='request'>
            /// Information on backup request.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItemInner> ListBackupStatusSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Restores a specific backup to another app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List the configurations of an app
            /// </summary>
            /// <remarks>
            /// Description for List the configurations of an app
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigResourceInner>> ListConfigurationsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the application settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> UpdateApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner appSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, appSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the application settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> ListApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the Authentication / Authorization settings
            /// associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettingsInner> UpdateAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsInner siteAuthSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettingsInner> GetAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Azure storage account configurations of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the Azure storage account configurations of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='azureStorageAccounts'>
            /// Azure storage accounts of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the Azure storage account configurations for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureStoragePropertyDictionaryResourceInner> UpdateAzureStorageAccountsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAzureStorageAccountsSlotWithHttpMessagesAsync(resourceGroupName, name, azureStorageAccounts, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Azure storage account configurations of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Azure storage account configurations of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the Azure storage account configurations for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AzureStoragePropertyDictionaryResourceInner> ListAzureStorageAccountsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAzureStorageAccountsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequestInner> UpdateBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequestInner> GetBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the connection settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionaryInner> UpdateConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionaryInner connectionStrings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the connection settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionaryInner> ListConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the logging configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfigInner> GetDiagnosticLogsConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the logging configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfigInner> UpdateDiagnosticLogsConfigSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfigInner siteLogsConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigSlotWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Description for Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the metadata for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> UpdateMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner metadata, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, metadata, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the metadata for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionaryInner> ListMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInner> ListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettingsInner> UpdateSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettingsInner pushSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, pushSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettingsInner> ListSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Description for Gets the configuration of an app, such as platform version
            /// and bitness, default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> GetConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> CreateOrUpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResourceInner siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> UpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigResourceInner siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a list of web app configuration snapshots identifiers.
            /// Each element of the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationSnapshotInfoSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a snapshot of the configuration of an app at a previous point in time.
            /// </summary>
            /// <remarks>
            /// Description for Gets a snapshot of the configuration of an app at a
            /// previous point in time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfigResourceInner> GetConfigurationSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reverts the configuration of an app to a previous snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Reverts the configuration of an app to a previous snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='snapshotId'>
            /// The ID of the snapshot to read.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoverSiteConfigurationSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string snapshotId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RecoverSiteConfigurationSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, snapshotId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the last lines of docker logs for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the last lines of docker logs for the given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetWebSiteContainerLogsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetWebSiteContainerLogsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Gets the ZIP archived docker log files for the given site
            /// </summary>
            /// <remarks>
            /// Description for Gets the ZIP archived docker log files for the given site
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetContainerLogsZipSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetContainerLogsZipSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// List continuous web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List continuous web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContinuousWebJobInner>> ListContinuousWebJobsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContinuousWebJobsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a continuous web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a continuous web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContinuousWebJobInner> GetContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a continuous web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a continuous web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start a continuous web job for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Start a continuous web job for an app, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop a continuous web job for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Stop a continuous web job for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopContinuousWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopContinuousWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List deployments for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentInner>> ListDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get a deployment by its ID for an app, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentInner> GetDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Create a deployment for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentInner> CreateDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, DeploymentInner deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a deployment by its ID for an app, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List deployment log for specific deployment for an app, or a deployment
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for List deployment log for specific deployment for an app, or
            /// a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// The ID of a specific deployment. This is the value of the name property in
            /// the JSON response from "GET /api/sites/{siteName}/deployments".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentInner> ListDeploymentLogSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentLogSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage. Use this to get information about the databases stored in a
            /// backup.
            /// </summary>
            /// <remarks>
            /// Description for Discovers an existing app backup that can be restored from
            /// a blob in Azure storage. Use this to get information about the databases
            /// stored in a backup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// perform discovery for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequestInner> DiscoverBackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverBackupSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Lists ownership identifiers for domain associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IdentifierInner>> ListDomainOwnershipIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Description for Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentifierInner> GetDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Description for Creates a domain ownership identifier for web app, or
            /// updates an existing ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentifierInner> CreateOrUpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Description for Creates a domain ownership identifier for web app, or
            /// updates an existing ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentifierInner> UpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the status of the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the status of the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> GetMSDeployStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMSDeployStatusSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> CreateMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the MSDeploy Log for the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the MSDeploy Log for the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployLogInner> GetMSDeployLogSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMSDeployLogSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the functions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List the functions for a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FunctionEnvelopeInner>> ListInstanceFunctionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceFunctionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch a short lived token that can be exchanged for a master key.
            /// </summary>
            /// <remarks>
            /// Description for Fetch a short lived token that can be exchanged for a
            /// master key.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetFunctionsAdminTokenSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFunctionsAdminTokenSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get function information by its ID for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get function information by its ID for web site, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionEnvelopeInner> GetInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create function for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Create function for web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='functionEnvelope'>
            /// Function details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionEnvelopeInner> CreateInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, FunctionEnvelopeInner functionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a function for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a function for web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get function secrets for a function in a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get function secrets for a function in a web site, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionSecretsInner> ListFunctionSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFunctionSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets
            /// hostname bindings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBindingInner>> ListHostNameBindingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Get the named hostname binding for an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API the named
            /// binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBindingInner> GetHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBindingInner> CreateOrUpdateHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBindingInner hostNameBinding, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Description for Retrieves a specific Service Bus Hybrid Connection used by
            /// this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> GetHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> CreateOrUpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Description for Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection.
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> UpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Description for Retrieves all Service Bus Hybrid Connections used by this
            /// Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionInner> ListHybridConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets hybrid connections configured for an app (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// hybrid connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> ListRelayServiceConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Description for Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> GetRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Creates a new hybrid connection configuration (PUT), or
            /// updates an existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> CreateOrUpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an existing
            /// one (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Creates a new hybrid connection configuration (PUT), or
            /// updates an existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntityInner> UpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets the
            /// production slot instances.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='instanceId'>
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets the
            /// production slot instances.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebSiteInstanceStatusInner> GetInstanceInfoSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceInfoSlotWithHttpMessagesAsync(resourceGroupName, name, instanceId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the status of the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the status of the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> GetInstanceMsDeployStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceMsDeployStatusSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> CreateInstanceMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInstanceMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the MSDeploy Log for the last MSDeploy operation.
            /// </summary>
            /// <remarks>
            /// Description for Get the MSDeploy Log for the last MSDeploy operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployLogInner> GetInstanceMSDeployLogSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceMSDeployLogSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListInstanceProcessesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInfoInner> GetInstanceProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Terminate a process by its ID for a web site, or a deployment slot, or
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Terminate a process by its ID for a web site, or a
            /// deployment slot, or specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInstanceProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteInstanceProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a memory dump of a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get a memory dump of a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetInstanceProcessDumpSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetInstanceProcessDumpSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListInstanceProcessModulesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessModulesSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='baseAddress'>
            /// Module base address.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessModuleInfoInner> GetInstanceProcessModuleSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceProcessModuleSlotWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListInstanceProcessThreadsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessThreadsSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Description for Shows whether an app can be cloned to another resource
            /// group or subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns information on
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCloneabilityInner> IsCloneableSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCloneableSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// backups of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListSiteBackupsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteBackupsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This is to allow calling via powershell and ARM template.
            /// </summary>
            /// <remarks>
            /// Description for This is to allow calling via powershell and ARM template.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionSecretsInner> ListSyncFunctionTriggersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSyncFunctionTriggersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the status of MySql in app migration, if one is active, and whether
            /// or not MySql in app is enabled
            /// </summary>
            /// <remarks>
            /// Description for Returns the status of MySql in app migration, if one is
            /// active, and whether or not MySql in app is enabled
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MigrateMySqlStatusInner> GetMigrateMySqlStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMigrateMySqlStatusSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Swift Virtual Network connection.
            /// </summary>
            /// <remarks>
            /// Description for Gets a Swift Virtual Network connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftVirtualNetworkInner> GetSwiftVirtualNetworkConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSwiftVirtualNetworkConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Integrates this Web App with a Virtual Network. This requires that 1)
            /// "swiftSupported" is true when doing a GET against this resource, and 2)
            /// that the target Subnet has already been delegated, and is not
            /// in use by another App Service Plan other than the one this App is in.
            /// </summary>
            /// <remarks>
            /// Description for Integrates this Web App with a Virtual Network. This
            /// requires that 1) "swiftSupported" is true when doing a GET against this
            /// resource, and 2) that the target Subnet has already been delegated, and is
            /// not
            /// in use by another App Service Plan other than the one this App is in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftVirtualNetworkInner> CreateOrUpdateSwiftVirtualNetworkConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetworkInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSwiftVirtualNetworkConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Swift Virtual Network connection from an app (or deployment
            /// slot).
            /// </summary>
            /// <remarks>
            /// Description for Deletes a Swift Virtual Network connection from an app (or
            /// deployment slot).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSwiftVirtualNetworkSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSwiftVirtualNetworkSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Integrates this Web App with a Virtual Network. This requires that 1)
            /// "swiftSupported" is true when doing a GET against this resource, and 2)
            /// that the target Subnet has already been delegated, and is not
            /// in use by another App Service Plan other than the one this App is in.
            /// </summary>
            /// <remarks>
            /// Description for Integrates this Web App with a Virtual Network. This
            /// requires that 1) "swiftSupported" is true when doing a GET against this
            /// resource, and 2) that the target Subnet has already been delegated, and is
            /// not
            /// in use by another App Service Plan other than the one this App is in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SwiftVirtualNetworkInner> UpdateSwiftVirtualNetworkConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SwiftVirtualNetworkInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSwiftVirtualNetworkConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets all network features used by the app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// network features for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkFeaturesInner> ListNetworkFeaturesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesSlotWithHttpMessagesAsync(resourceGroupName, name, view, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// an operation for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTraceOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTraceOperationSlotWithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site (To be deprecated).
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site (To be
            /// deprecated).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> StartWebSiteNetworkTraceOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// an operation for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTracesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTracesSlotWithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// an operation for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTraceOperationSlotV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTraceOperationSlotV2WithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named operation for a network trace capturing (or deployment slot,
            /// if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets a named operation for a network trace capturing (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='operationId'>
            /// GUID of the operation.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// an operation for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> GetNetworkTracesSlotV2Async(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkTracesSlotV2WithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Generates a new publishing password for an app (or
            /// deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API generate a
            /// new publishing password for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GenerateNewSitePublishingPasswordSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GenerateNewSitePublishingPasswordSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Description for Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and
            /// endTime eq 2014-12-31T23:59:59Z and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Description for Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SitePhpErrorLogFlagInner> GetSitePhpErrorLogFlagSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the premier add-ons for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> ListPremierAddOnsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> GetPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> AddPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnInner premierAddOn, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Description for Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PremierAddOnInner> UpdatePremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnPatchResource premierAddOn, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets data around private site access enablement and authorized Virtual
            /// Networks that can access the site.
            /// </summary>
            /// <remarks>
            /// Description for Gets data around private site access enablement and
            /// authorized Virtual Networks that can access the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateAccessInner> GetPrivateAccessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPrivateAccessSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets data around private site access enablement and authorized Virtual
            /// Networks that can access the site.
            /// </summary>
            /// <remarks>
            /// Description for Sets data around private site access enablement and
            /// authorized Virtual Networks that can access the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='access'>
            /// The information for the private access
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateAccessInner> PutPrivateAccessVnetSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PrivateAccessInner access, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutPrivateAccessVnetSlotWithHttpMessagesAsync(resourceGroupName, name, access, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListProcessesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInfoInner> GetProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Terminate a process by its ID for a web site, or a deployment slot, or
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Terminate a process by its ID for a web site, or a
            /// deployment slot, or specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProcessSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProcessSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a memory dump of a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get a memory dump of a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetProcessDumpSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetProcessDumpSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListProcessModulesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessModulesSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get process information by its ID for a specific scaled-out instance in a
            /// web site.
            /// </summary>
            /// <remarks>
            /// Description for Get process information by its ID for a specific scaled-out
            /// instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='baseAddress'>
            /// Module base address.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessModuleInfoInner> GetProcessModuleSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string baseAddress, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessModuleSlotWithHttpMessagesAsync(resourceGroupName, name, processId, baseAddress, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='processId'>
            /// PID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListProcessThreadsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string processId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessThreadsSlotWithHttpMessagesAsync(resourceGroupName, name, processId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get public certificates for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get public certificates for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets
            /// hostname bindings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PublicCertificateInner>> ListPublicCertificatesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublicCertificatesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named public certificate for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Get the named public certificate for an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API the named
            /// binding for the production slot.
            /// </param>
            /// <param name='publicCertificateName'>
            /// Public certificate name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublicCertificateInner> GetPublicCertificateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string publicCertificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublicCertificateSlotWithHttpMessagesAsync(resourceGroupName, name, slot, publicCertificateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publicCertificateName'>
            /// Public certificate name.
            /// </param>
            /// <param name='publicCertificate'>
            /// Public certificate details. This is the JSON representation of a
            /// PublicCertificate object.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublicCertificateInner> CreateOrUpdatePublicCertificateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string publicCertificateName, PublicCertificateInner publicCertificate, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdatePublicCertificateSlotWithHttpMessagesAsync(resourceGroupName, name, publicCertificateName, publicCertificate, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='publicCertificateName'>
            /// Public certificate name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePublicCertificateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string publicCertificateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletePublicCertificateSlotWithHttpMessagesAsync(resourceGroupName, name, slot, publicCertificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets the publishing profile for an app (or deployment slot,
            /// if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='publishingProfileOptions'>
            /// Specifies publishingProfileOptions for publishing profile. For example, use
            /// {"format": "FileZilla3"} to get a FileZilla publishing profile.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing profile for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ListPublishingProfileXmlWithSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions publishingProfileOptions, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, publishingProfileOptions, slot, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Description for Resets the configuration settings of the current slot if
            /// they were previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API resets
            /// configuration settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetSlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetSlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restart the production slot.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores an app from a backup blob in Azure Storage.
            /// </summary>
            /// <remarks>
            /// Description for Restores an app from a backup blob in Azure Storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreFromBackupBlobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreFromBackupBlobSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a deleted web app to this web app.
            /// </summary>
            /// <remarks>
            /// Description for Restores a deleted web app to this web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Deleted web app restore information.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreFromDeletedAppSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreFromDeletedAppSlotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a web app from a snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Restores a web app from a snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Snapshot restore settings. Snapshot information can be obtained by calling
            /// GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestoreSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RestoreSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of siteextensions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get list of siteextensions for a web site, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteExtensionInfoInner>> ListSiteExtensionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteExtensionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get site extension information by its ID for a web site, or a deployment
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for Get site extension information by its ID for a web site, or
            /// a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteExtensionInfoInner> GetSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Install site extension on a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Install site extension on a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteExtensionInfoInner> InstallSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InstallSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a site extension from a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Remove a site extension from a web site, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Copies a deployment slot to another deployment slot of an app.
            /// </summary>
            /// <remarks>
            /// Description for Copies a deployment slot to another deployment slot of an
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='copySlotEntity'>
            /// JSON object that contains the target slot name and site config properties
            /// to override the source slot config. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CopySlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmCopySlotEntity copySlotEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CopySlotSlotWithHttpMessagesAsync(resourceGroupName, name, copySlotEntity, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Description for Get the difference in configuration settings between two
            /// web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> ListSlotDifferencesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotDifferencesSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Description for Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SwapSlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SwapSlotSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name.
            /// </param>
            /// <param name='slot'>
            /// Website Slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user from DRSecondary endpoint.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user from DRSecondary
            /// endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name.
            /// </param>
            /// <param name='slot'>
            /// Website Slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsFromDRSecondarySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsFromDRSecondarySlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> GetSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> CreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> UpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will start
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> StartNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will stop
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Description for Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncRepositorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SyncRepositorySlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Syncs function trigger metadata to the scale controller
            /// </summary>
            /// <remarks>
            /// Description for Syncs function trigger metadata to the scale controller
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncFunctionTriggersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SyncFunctionTriggersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List triggered web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List triggered web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredWebJobInner>> ListTriggeredWebJobsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a triggered web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a triggered web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggeredWebJobInner> GetTriggeredWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggeredWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a triggered web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a triggered web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes
            /// web job for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTriggeredWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTriggeredWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List a triggered web job's history for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List a triggered web job's history for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredJobHistoryInner>> ListTriggeredWebJobHistorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobHistorySlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a triggered web job's history by its ID for an app, , or a deployment
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a triggered web job's history by its ID for an app, ,
            /// or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='id'>
            /// History ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggeredJobHistoryInner> GetTriggeredWebJobHistorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggeredWebJobHistorySlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, id, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Run a triggered web job for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Run a triggered web job for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RunTriggeredWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RunTriggeredWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets the quota usage information of an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// quota information of the production slot.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and
            /// timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Description for Gets the virtual networks the app (or deployment slot) is
            /// connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// virtual network connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfoInner>> ListVnetConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Description for Gets a virtual network the app (or deployment slot) is
            /// connected to by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named virtual network for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfoInner> GetVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a Virtual Network connection to an app or slot (PUT)
            /// or updates the connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfoInner> CreateOrUpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a connection from an app (or deployment slot to a
            /// named virtual network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a Virtual Network connection to an app or slot (PUT)
            /// or updates the connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfoInner> UpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Description for Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get a
            /// gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGatewayInner> GetVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a gateway to a connected Virtual Network (PUT) or
            /// updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGatewayInner> CreateOrUpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a gateway to a connected Virtual Network (PUT) or
            /// updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGatewayInner> UpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List webjobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List webjobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebJobInner>> ListWebJobsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebJobsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get webjob information for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get webjob information for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of the web job.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebJobInner> GetWebJobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebJobSlotWithHttpMessagesAsync(resourceGroupName, name, webJobName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Description for Get the difference in configuration settings between two
            /// web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> ListSlotDifferencesFromProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotDifferencesFromProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Description for Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user from DRSecondary endpoint.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user from DRSecondary
            /// endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsFromDRSecondaryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsFromDRSecondaryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> GetSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> CreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> UpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StartWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> StartNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Description for Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.StopNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Description for Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncRepositoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SyncRepositoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Syncs function trigger metadata to the scale controller
            /// </summary>
            /// <remarks>
            /// Description for Syncs function trigger metadata to the scale controller
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncFunctionTriggersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SyncFunctionTriggersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List triggered web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List triggered web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredWebJobInner>> ListTriggeredWebJobsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a triggered web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a triggered web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggeredWebJobInner> GetTriggeredWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggeredWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a triggered web job by its ID for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Delete a triggered web job by its ID for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTriggeredWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTriggeredWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List a triggered web job's history for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List a triggered web job's history for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredJobHistoryInner>> ListTriggeredWebJobHistoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobHistoryWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a triggered web job's history by its ID for an app, , or a deployment
            /// slot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a triggered web job's history by its ID for an app, ,
            /// or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='id'>
            /// History ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TriggeredJobHistoryInner> GetTriggeredWebJobHistoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTriggeredWebJobHistoryWithHttpMessagesAsync(resourceGroupName, name, webJobName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Run a triggered web job for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Run a triggered web job for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of Web Job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RunTriggeredWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RunTriggeredWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets the quota usage information of an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and
            /// timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Description for Gets the virtual networks the app (or deployment slot) is
            /// connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfoInner>> ListVnetConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Description for Gets a virtual network the app (or deployment slot) is
            /// connected to by name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfoInner> GetVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a Virtual Network connection to an app or slot (PUT)
            /// or updates the connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfoInner> CreateOrUpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Description for Deletes a connection from an app (or deployment slot to a
            /// named virtual network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a Virtual Network connection to an app or slot (PUT)
            /// or updates the connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfoInner> UpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Description for Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGatewayInner> GetVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a gateway to a connected Virtual Network (PUT) or
            /// updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGatewayInner> CreateOrUpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Description for Adds a gateway to a connected Virtual Network (PUT) or
            /// updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGatewayInner> UpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List webjobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List webjobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebJobInner>> ListWebJobsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebJobsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get webjob information for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get webjob information for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='webJobName'>
            /// Name of the web job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebJobInner> GetWebJobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string webJobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebJobWithHttpMessagesAsync(resourceGroupName, name, webJobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new web, mobile, or API app in an existing
            /// resource group, or updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> BeginCreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Restores a specific backup to another app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInner> BeginListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> BeginCreateMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create function for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Create function for web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='functionEnvelope'>
            /// Function details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionEnvelopeInner> BeginCreateFunctionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, FunctionEnvelopeInner functionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateFunctionWithHttpMessagesAsync(resourceGroupName, name, functionName, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> BeginCreateInstanceMSDeployOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateInstanceMSDeployOperationWithHttpMessagesAsync(resourceGroupName, name, instanceId, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Description for Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='migrationOptions'>
            /// Migration migrationOptions.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageMigrationResponseInner> BeginMigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions migrationOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, migrationOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Description for Migrates a local (in-app) MySql database to a remote MySql
            /// database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationInner> BeginMigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> BeginStartWebSiteNetworkTraceOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartWebSiteNetworkTraceOperationWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores an app from a backup blob in Azure Storage.
            /// </summary>
            /// <remarks>
            /// Description for Restores an app from a backup blob in Azure Storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreFromBackupBlobAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreFromBackupBlobWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a deleted web app to this web app.
            /// </summary>
            /// <remarks>
            /// Description for Restores a deleted web app to this web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Deleted web app restore information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreFromDeletedAppAsync(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreFromDeletedAppWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a web app from a snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Restores a web app from a snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Snapshot restore settings. Snapshot information can be obtained by calling
            /// GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreSnapshotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreSnapshotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Install site extension on a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Install site extension on a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteExtensionInfoInner> BeginInstallSiteExtensionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginInstallSiteExtensionWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Copies a deployment slot to another deployment slot of an app.
            /// </summary>
            /// <remarks>
            /// Description for Copies a deployment slot to another deployment slot of an
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='copySlotEntity'>
            /// JSON object that contains the target slot name and site config properties
            /// to override the source slot config. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginCopyProductionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmCopySlotEntity copySlotEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginCopyProductionSlotWithHttpMessagesAsync(resourceGroupName, name, copySlotEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Description for Creates a new web, mobile, or API app in an existing
            /// resource group, or updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteInner> BeginCreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Restores a specific backup to another app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInner> BeginListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> BeginCreateMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create function for web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Create function for web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='functionName'>
            /// Function name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot.
            /// </param>
            /// <param name='functionEnvelope'>
            /// Function details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FunctionEnvelopeInner> BeginCreateInstanceFunctionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string functionName, string slot, FunctionEnvelopeInner functionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateInstanceFunctionSlotWithHttpMessagesAsync(resourceGroupName, name, functionName, slot, functionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke the MSDeploy web app extension.
            /// </summary>
            /// <remarks>
            /// Description for Invoke the MSDeploy web app extension.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of web app instance.
            /// </param>
            /// <param name='mSDeploy'>
            /// Details of MSDeploy operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSDeployStatusInner> BeginCreateInstanceMSDeployOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, MSDeploy mSDeploy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateInstanceMSDeployOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, mSDeploy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> BeginStartWebSiteNetworkTraceOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartWebSiteNetworkTraceOperationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores an app from a backup blob in Azure Storage.
            /// </summary>
            /// <remarks>
            /// Description for Restores an app from a backup blob in Azure Storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Information on restore request .
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreFromBackupBlobSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreFromBackupBlobSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a deleted web app to this web app.
            /// </summary>
            /// <remarks>
            /// Description for Restores a deleted web app to this web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Deleted web app restore information.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreFromDeletedAppSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, DeletedAppRestoreRequest restoreRequest, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreFromDeletedAppSlotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Restores a web app from a snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Restores a web app from a snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app.
            /// </param>
            /// <param name='restoreRequest'>
            /// Snapshot restore settings. Snapshot information can be obtained by calling
            /// GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestoreSnapshotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SnapshotRestoreRequest restoreRequest, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRestoreSnapshotSlotWithHttpMessagesAsync(resourceGroupName, name, restoreRequest, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Install site extension on a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Install site extension on a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Site name.
            /// </param>
            /// <param name='siteExtensionId'>
            /// Site extension name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API uses the
            /// production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteExtensionInfoInner> BeginInstallSiteExtensionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string siteExtensionId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginInstallSiteExtensionSlotWithHttpMessagesAsync(resourceGroupName, name, siteExtensionId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Copies a deployment slot to another deployment slot of an app.
            /// </summary>
            /// <remarks>
            /// Description for Copies a deployment slot to another deployment slot of an
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='copySlotEntity'>
            /// JSON object that contains the target slot name and site config properties
            /// to override the source slot config. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginCopySlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmCopySlotEntity copySlotEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginCopySlotSlotWithHttpMessagesAsync(resourceGroupName, name, copySlotEntity, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Description for Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot is
            /// used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginSwapSlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginSwapSlotSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> BeginCreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> BeginStartNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Description for Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginSwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginSwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Description for Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControlInner> BeginCreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Description for Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds.
            /// </param>
            /// <param name='maxFrameLength'>
            /// The maximum frame length in bytes (Optional).
            /// </param>
            /// <param name='sasUrl'>
            /// The Blob URL to store capture file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkTraceInner>> BeginStartNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), int? maxFrameLength = default(int?), string sasUrl = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Description for Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Description for Gets all web, mobile, and API apps in the specified
            /// resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListByResourceGroupNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListBackupsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the configurations of an app
            /// </summary>
            /// <remarks>
            /// Description for List the configurations of an app
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigResourceInner>> ListConfigurationsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a list of web app configuration snapshots identifiers.
            /// Each element of the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationSnapshotInfoNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List continuous web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List continuous web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContinuousWebJobInner>> ListContinuousWebJobsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContinuousWebJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List deployments for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentInner>> ListDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Lists ownership identifiers for domain associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IdentifierInner>> ListDomainOwnershipIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the functions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List the functions for a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FunctionEnvelopeInner>> ListFunctionsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFunctionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBindingInner>> ListHostNameBindingsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListInstanceProcessesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListInstanceProcessModulesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessModulesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListInstanceProcessThreadsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessThreadsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListSiteBackupsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteBackupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Description for Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListProcessesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListProcessModulesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessModulesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListProcessThreadsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessThreadsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get public certificates for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get public certificates for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PublicCertificateInner>> ListPublicCertificatesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublicCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of siteextensions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get list of siteextensions for a web site, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteExtensionInfoInner>> ListSiteExtensionsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteExtensionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Description for Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListSlotsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListBackupsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the configurations of an app
            /// </summary>
            /// <remarks>
            /// Description for List the configurations of an app
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigResourceInner>> ListConfigurationsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of web app configuration snapshots identifiers. Each element of
            /// the list contains a timestamp and the ID of the snapshot.
            /// </summary>
            /// <remarks>
            /// Description for Gets a list of web app configuration snapshots identifiers.
            /// Each element of the list contains a timestamp and the ID of the snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteConfigurationSnapshotInfo>> ListConfigurationSnapshotInfoSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationSnapshotInfoSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List continuous web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List continuous web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ContinuousWebJobInner>> ListContinuousWebJobsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListContinuousWebJobsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List deployments for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeploymentInner>> ListDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Description for Lists ownership identifiers for domain associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<IdentifierInner>> ListDomainOwnershipIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the functions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List the functions for a web site, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<FunctionEnvelopeInner>> ListInstanceFunctionsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceFunctionsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBindingInner>> ListHostNameBindingsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListInstanceProcessesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListInstanceProcessModulesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessModulesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListInstanceProcessThreadsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceProcessThreadsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Description for Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItemInner>> ListSiteBackupsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteBackupsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Description for Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of processes for a web site, or a deployment slot, or for a
            /// specific scaled-out instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for Get list of processes for a web site, or a deployment slot,
            /// or for a specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessInfoInner>> ListProcessesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List module information for a process by its ID for a specific scaled-out
            /// instance in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List module information for a process by its ID for a
            /// specific scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessModuleInfoInner>> ListProcessModulesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessModulesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List the threads in a process by its ID for a specific scaled-out instance
            /// in a web site.
            /// </summary>
            /// <remarks>
            /// Description for List the threads in a process by its ID for a specific
            /// scaled-out instance in a web site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProcessThreadInfo>> ListProcessThreadsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessThreadsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get public certificates for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get public certificates for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PublicCertificateInner>> ListPublicCertificatesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublicCertificatesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of siteextensions for a web site, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for Get list of siteextensions for a web site, or a deployment
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteExtensionInfoInner>> ListSiteExtensionsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteExtensionsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Description for Get the difference in configuration settings between two
            /// web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> ListSlotDifferencesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotDifferencesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user from DRSecondary endpoint.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user from DRSecondary
            /// endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsFromDRSecondarySlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsFromDRSecondarySlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List triggered web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List triggered web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredWebJobInner>> ListTriggeredWebJobsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List a triggered web job's history for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List a triggered web job's history for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredJobHistoryInner>> ListTriggeredWebJobHistorySlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobHistorySlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets the quota usage information of an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List webjobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List webjobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebJobInner>> ListWebJobsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebJobsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Description for Get the difference in configuration settings between two
            /// web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> ListSlotDifferencesFromProductionNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotDifferencesFromProductionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user from DRSecondary endpoint.
            /// </summary>
            /// <remarks>
            /// Description for Returns all Snapshots to the user from DRSecondary
            /// endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsFromDRSecondaryNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsFromDRSecondaryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List triggered web jobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List triggered web jobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredWebJobInner>> ListTriggeredWebJobsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List a triggered web job's history for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List a triggered web job's history for an app, or a
            /// deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<TriggeredJobHistoryInner>> ListTriggeredWebJobHistoryNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTriggeredWebJobHistoryNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Description for Gets the quota usage information of an app (or deployment
            /// slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List webjobs for an app, or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Description for List webjobs for an app, or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebJobInner>> ListWebJobsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
