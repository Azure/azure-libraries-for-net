// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Fluent.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The capabilities for a location.
    /// </summary>
    public partial class LocationCapabilitiesInner
    {
        /// <summary>
        /// Initializes a new instance of the LocationCapabilitiesInner class.
        /// </summary>
        public LocationCapabilitiesInner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocationCapabilitiesInner class.
        /// </summary>
        /// <param name="name">The location name.</param>
        /// <param name="status">Azure SQL Database's status for the location.
        /// Possible values include: 'Visible', 'Available', 'Default',
        /// 'Disabled'</param>
        /// <param name="supportedServerVersions">The list of supported server
        /// versions.</param>
        public LocationCapabilitiesInner(string name = default(string), CapabilityStatus? status = default(CapabilityStatus?), IList<ServerVersionCapability> supportedServerVersions = default(IList<ServerVersionCapability>))
        {
            Name = name;
            Status = status;
            SupportedServerVersions = supportedServerVersions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the location name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets azure SQL Database's status for the location. Possible values
        /// include: 'Visible', 'Available', 'Default', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public CapabilityStatus? Status { get; private set; }

        /// <summary>
        /// Gets the list of supported server versions.
        /// </summary>
        [JsonProperty(PropertyName = "supportedServerVersions")]
        public IList<ServerVersionCapability> SupportedServerVersions { get; private set; }

    }
}
