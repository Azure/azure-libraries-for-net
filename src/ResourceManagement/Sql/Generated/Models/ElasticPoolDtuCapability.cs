// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Fluent.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The Elastic Pool DTU capability.
    /// </summary>
    public partial class ElasticPoolDtuCapability
    {
        /// <summary>
        /// Initializes a new instance of the ElasticPoolDtuCapability class.
        /// </summary>
        public ElasticPoolDtuCapability()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ElasticPoolDtuCapability class.
        /// </summary>
        /// <param name="limit">The DTU limit for the pool.</param>
        /// <param name="maxDatabaseCount">The maximum number of databases
        /// supported.</param>
        /// <param name="includedMaxSize">The included (free) max size for this
        /// DTU.</param>
        /// <param name="supportedMaxSizes">The list of supported max
        /// sizes.</param>
        /// <param name="supportedPerDatabaseMaxSizes">The list of supported
        /// per database max sizes.</param>
        /// <param name="supportedPerDatabaseMaxDtus">The list of supported per
        /// database max DTUs.</param>
        /// <param name="status">The status of the capability. Possible values
        /// include: 'Visible', 'Available', 'Default', 'Disabled'</param>
        /// <param name="reason">The reason for the capability not being
        /// available.</param>
        public ElasticPoolDtuCapability(int? limit = default(int?), int? maxDatabaseCount = default(int?), MaxSizeCapability includedMaxSize = default(MaxSizeCapability), IList<MaxSizeCapability> supportedMaxSizes = default(IList<MaxSizeCapability>), IList<MaxSizeCapability> supportedPerDatabaseMaxSizes = default(IList<MaxSizeCapability>), IList<ElasticPoolPerDatabaseMaxDtuCapability> supportedPerDatabaseMaxDtus = default(IList<ElasticPoolPerDatabaseMaxDtuCapability>), CapabilityStatus? status = default(CapabilityStatus?), string reason = default(string))
        {
            Limit = limit;
            MaxDatabaseCount = maxDatabaseCount;
            IncludedMaxSize = includedMaxSize;
            SupportedMaxSizes = supportedMaxSizes;
            SupportedPerDatabaseMaxSizes = supportedPerDatabaseMaxSizes;
            SupportedPerDatabaseMaxDtus = supportedPerDatabaseMaxDtus;
            Status = status;
            Reason = reason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the DTU limit for the pool.
        /// </summary>
        [JsonProperty(PropertyName = "limit")]
        public int? Limit { get; private set; }

        /// <summary>
        /// Gets the maximum number of databases supported.
        /// </summary>
        [JsonProperty(PropertyName = "maxDatabaseCount")]
        public int? MaxDatabaseCount { get; private set; }

        /// <summary>
        /// Gets the included (free) max size for this DTU.
        /// </summary>
        [JsonProperty(PropertyName = "includedMaxSize")]
        public MaxSizeCapability IncludedMaxSize { get; private set; }

        /// <summary>
        /// Gets the list of supported max sizes.
        /// </summary>
        [JsonProperty(PropertyName = "supportedMaxSizes")]
        public IList<MaxSizeCapability> SupportedMaxSizes { get; private set; }

        /// <summary>
        /// Gets the list of supported per database max sizes.
        /// </summary>
        [JsonProperty(PropertyName = "supportedPerDatabaseMaxSizes")]
        public IList<MaxSizeCapability> SupportedPerDatabaseMaxSizes { get; private set; }

        /// <summary>
        /// Gets the list of supported per database max DTUs.
        /// </summary>
        [JsonProperty(PropertyName = "supportedPerDatabaseMaxDtus")]
        public IList<ElasticPoolPerDatabaseMaxDtuCapability> SupportedPerDatabaseMaxDtus { get; private set; }

        /// <summary>
        /// Gets the status of the capability. Possible values include:
        /// 'Visible', 'Available', 'Default', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public CapabilityStatus? Status { get; private set; }

        /// <summary>
        /// Gets or sets the reason for the capability not being available.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

    }
}
